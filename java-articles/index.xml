<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java-articles on Simple Solution</title>
    <link>https://simplesolution.dev/java-articles/</link>
    <description>Recent content in Java-articles on Simple Solution</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Oct 2020 21:09:18 +0700</lastBuildDate>
    
	<atom:link href="https://simplesolution.dev/java-articles/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Capitalize First Letter of a String in Java using Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-capitalize-first-letter-of-string/</link>
      <pubDate>Mon, 05 Oct 2020 21:09:18 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-capitalize-first-letter-of-string/</guid>
      <description>Introduction In this article we show how to use StringUtils of Apache Commons Lang library to capitalize the first character of a Java String by using StringUtils.capitalize() utility method.
Setup Apache Commons Lang in Java project If you are using Gradle build then add the following dependency configuration into build.gradle file.
compile group: &amp;#39;org.apache.commons&amp;#39;, name: &amp;#39;commons-lang3&amp;#39;, version: &amp;#39;3.11&amp;#39; Or add the following dependency XML tag to pom.xml file if you are using Maven build.</description>
    </item>
    
    <item>
      <title>Abbreviates a String using ellipses in Java using Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-abbreviates-string-using-ellipses/</link>
      <pubDate>Sun, 04 Oct 2020 23:50:42 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-abbreviates-string-using-ellipses/</guid>
      <description>Introduction In this post we show how to use Apache Commons Lang library to abbreviate a String using ellipses. We provide multiple Java code examples on how to use StringUtils.abbreviate() utility method to achieve our goal.
Setup Apache Commons Lang in Java project If you are using Gradle build then add the following dependency configuration into build.gradle file.
compile group: &amp;#39;org.apache.commons&amp;#39;, name: &amp;#39;commons-lang3&amp;#39;, version: &amp;#39;3.11&amp;#39; Or add the following dependency XML tag to pom.</description>
    </item>
    
    <item>
      <title>Check if a String is a valid numeric value in Java using Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-check-if-string-is-valid-numeric-value/</link>
      <pubDate>Sun, 04 Oct 2020 23:07:43 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-check-if-string-is-valid-numeric-value/</guid>
      <description>Introduction In this article we show you how to use different utility classes in Apache Commons Lang library to check if a String is a valid number in Java. We provide different working code examples how to use methods such as NumberUtils.isCreatable(), NumberUtils.isDigits() or StringUtils.isNumeric().
Setup Apache Commons Lang in Java project If you are using Gradle build then add the following dependency configuration into build.gradle file.
compile group: &amp;#39;org.</description>
    </item>
    
    <item>
      <title>Check if a String contains another String in Java</title>
      <link>https://simplesolution.dev/java-check-if-a-string-contains-a-substring/</link>
      <pubDate>Sun, 04 Oct 2020 15:57:35 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-check-if-a-string-contains-a-substring/</guid>
      <description>Core Java classes provide different solutions that developers can use to check if a String contains another String inside it. In this article we will show you different Java code examples how to check if a String is inside another String using core Java methods such as String.contains(), String.indexOf(), String.lastIndexOf(), String.matches() and java.util.regex.Pattern class.
Java code how to use String.contains() In this code example we use String.contains() which returns a boolean value true if and only if the String contains a specific substring.</description>
    </item>
    
    <item>
      <title>Replace or Remove All Digits of a String in Java using regular expression</title>
      <link>https://simplesolution.dev/java-replace-or-remove-all-digits-of-a-string-in-using-regular-expression/</link>
      <pubDate>Sun, 04 Oct 2020 13:47:34 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-replace-or-remove-all-digits-of-a-string-in-using-regular-expression/</guid>
      <description>In this article we are going to learn how to use core Java classes to remove all numeric characters from a String or replace numeric characters with other characters. We will show you different Java code examples how to use String.replaceAll() method and java.util.regex.Pattern class.
Java code example using regex &amp;ldquo;[0-9]&amp;rdquo; with String.replaceAll() method
public class RemoveReplaceDigitsExample1 { public static void main(String[] args) { String testString = &amp;#34;Your OTP (one time password) is 112233&amp;#34;; // Remove all numeric characters  String removedDigitsString = testString.</description>
    </item>
    
    <item>
      <title>Extract Digits from a String in Java using regular expression</title>
      <link>https://simplesolution.dev/java-extract-digits-from-a-string-using-regular-expression/</link>
      <pubDate>Sat, 03 Oct 2020 22:17:59 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-extract-digits-from-a-string-using-regular-expression/</guid>
      <description>In this post we show you how to use regular expressions to remove all non-digits characters of a String and return the number only String in Java application.
Following Java example code use String.replaceAll() method with regex &amp;ldquo;[^0-9]&amp;rdquo; to replace non-digits characters in a String with empty String.
public class ExtractDigitsFromStringExample1 { public static void main(String[] args) { String testString = &amp;#34;Java was released in 1995&amp;#34;; String numberOnlyString = testString.replaceAll(&amp;#34;[^0-9]&amp;#34;, &amp;#34;&amp;#34;); System.</description>
    </item>
    
    <item>
      <title>Java Find Difference between two Strings using StringUtils Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-find-difference-between-two-strings-using-stringutils-apache-commons-lang/</link>
      <pubDate>Fri, 02 Oct 2020 22:57:11 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-find-difference-between-two-strings-using-stringutils-apache-commons-lang/</guid>
      <description>Introduction In this post we will show you Java example code how to find the difference between two Strings using StringUtils utility class of Apache Commons Lang library.
Setup Apache Commons Lang in Java project If you are using Gradle build then add the following dependency configuration into build.gradle file.
compile group: &amp;#39;org.apache.commons&amp;#39;, name: &amp;#39;commons-lang3&amp;#39;, version: &amp;#39;3.11&amp;#39; Or add the following dependency XML tag to pom.xml file if you are using Maven build.</description>
    </item>
    
    <item>
      <title>Java check String is empty or blank or contains text using StringUtils Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-check-string-is-empty-blank-contains-text-stringutils-apache-commons-lang/</link>
      <pubDate>Fri, 02 Oct 2020 00:32:50 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-check-string-is-empty-blank-contains-text-stringutils-apache-commons-lang/</guid>
      <description>Introduction In this post we are going to learn how to use StringUtils utility class of Apache Commons Lang library in Java application to check if a string contains text, an empty string or a blank string.
Setup Apache Commons Lang in Java project If you are using Gradle build then add the following dependency configuration into build.gradle file.
compile group: &amp;#39;org.apache.commons&amp;#39;, name: &amp;#39;commons-lang3&amp;#39;, version: &amp;#39;3.11&amp;#39; Or add the following dependency XML tag to pom.</description>
    </item>
    
    <item>
      <title>Spring Boot SFTP File Transfer using JSch Java Library</title>
      <link>https://simplesolution.dev/spring-boot-sftp-file-transfer-using-jsch-java-library/</link>
      <pubDate>Mon, 28 Sep 2020 22:37:34 +0700</pubDate>
      
      <guid>https://simplesolution.dev/spring-boot-sftp-file-transfer-using-jsch-java-library/</guid>
      <description>Overview In this post we will show you how to transfer files from a local host to a remote server and download files from a remote server to local host via SFTP in Spring Boot applications. In order to transfer files via SFTP in Java applications we also explore the JSch library.
Creating Spring Boot Project with Spring Tool Suite on Eclipse From Spring Tool Suite IDE select menu File -&amp;gt; New -&amp;gt; Spring Starter Project.</description>
    </item>
    
    <item>
      <title>Spring Boot Web Application Upload File</title>
      <link>https://simplesolution.dev/spring-boot-web-application-upload-file/</link>
      <pubDate>Fri, 28 Feb 2020 00:37:35 +0700</pubDate>
      
      <guid>https://simplesolution.dev/spring-boot-web-application-upload-file/</guid>
      <description>In this tutorial weâ€™re going to learn how to implement file uploading function in a Spring Boot web application.
Creating Spring Boot Project with Spring Tool Suite on Eclipse Open Spring Tool Suite and go to menu File -&amp;gt; New -&amp;gt; Spring Starter Project.
On the New Spring Starter Project window, input your project information as below screenshot and click Next button.
On the New Spring Starter Project Dependencies, choose Thymeleaf and Spring Web then click Finish.</description>
    </item>
    
    <item>
      <title>Generate Thumbnail Images in Java with Thumbnailator library</title>
      <link>https://simplesolution.dev/generate-thumbnail-images-in-java-with-thumbnailator-library/</link>
      <pubDate>Thu, 27 Feb 2020 00:52:08 +0700</pubDate>
      
      <guid>https://simplesolution.dev/generate-thumbnail-images-in-java-with-thumbnailator-library/</guid>
      <description>As a daily job of a web developer you usually have the scenario that you need to generate the thumbnail image from a large original image. This take can easily be done by the Thumbnailator library, an easy to use thumbnail generation library for Java. In this Java tutorial we are going to learn how to use the Thumbnailator library.
Thumbnailator home page: github.com/coobird/thumbnailator
Project Dependencies:
Adding below dependencies to build.</description>
    </item>
    
    <item>
      <title>Top 3 Libraries for Writing and Reading CSV File in Java</title>
      <link>https://simplesolution.dev/top-3-libraries-for-writing-and-reading-csv-file-in-java/</link>
      <pubDate>Wed, 26 Feb 2020 01:15:38 +0700</pubDate>
      
      <guid>https://simplesolution.dev/top-3-libraries-for-writing-and-reading-csv-file-in-java/</guid>
      <description>In this tutorial weâ€™re going to learn how to use open source Java libraries to quickly write and read Comma Separated Values or CSV file format. We will explore 3 useful libraries and implement Java programs to write and read CSV files using each library.
Apache Commons CSV Home page: commons.apache.org/proper/commons-csv/
Project Dependencies:
Adding below dependencies to build.gradle file if you are using Gradle build tool. compile group: &amp;#39;org.apache.commons&amp;#39;, name: &amp;#39;commons-csv&amp;#39;, version: &amp;#39;1.</description>
    </item>
    
    <item>
      <title>Apache POI Hide and Unhide Excel Row using Row.setZeroHeight()</title>
      <link>https://simplesolution.dev/apache-poi-hide-and-unhide-excel-row-using-row.setzeroheight/</link>
      <pubDate>Thu, 09 Jan 2020 07:56:46 +0700</pubDate>
      
      <guid>https://simplesolution.dev/apache-poi-hide-and-unhide-excel-row-using-row.setzeroheight/</guid>
      <description>Introduction In Excel there is an option to hide / unhide a row by select the row then righ click on it and choose Hide / Unhide option. In this tutorial we will learn how to use Apache POI library in Java to create an Excel file and hide its row. Then we try to unhide it by another Java application example.
Apache POI Overview Apache POI is a open source library to work with Microsoft Office documents in Java.</description>
    </item>
    
    <item>
      <title>Apache POI Creating Multiple Fonts Excel Cell using RichTextString</title>
      <link>https://simplesolution.dev/apache-poi-creating-multiple-fonts-excel-cell-using-richtextstring/</link>
      <pubDate>Tue, 07 Jan 2020 00:42:52 +0700</pubDate>
      
      <guid>https://simplesolution.dev/apache-poi-creating-multiple-fonts-excel-cell-using-richtextstring/</guid>
      <description>Introduction In this tutorial we will learn how to create an Excel cell with multiple font styles using Apache POI library.
We will implement different examples to create .xls and xlsx Excel file format using HSSFRichTextString and XSSFRichTextString class in Apache POI.
Apache POI Overview Apache POI is a open source library to work with Microsoft Office documents in Java.
You can get more information about the project at poi.</description>
    </item>
    
    <item>
      <title>Creating PDF Document Page Labels in Java with Apache PDFBox</title>
      <link>https://simplesolution.dev/creating-pdf-document-page-labels-in-java-with-apache-pdfbox/</link>
      <pubDate>Thu, 02 Jan 2020 21:58:44 +0700</pubDate>
      
      <guid>https://simplesolution.dev/creating-pdf-document-page-labels-in-java-with-apache-pdfbox/</guid>
      <description>Introduction In PDF document format the page label to identify each document page visually for example showing text label on thumbnail panel on PDF reader application. In this Java tutorial we will learn how to create page labels for PDF document by Java application using Apache PDFBox library.
Apache PDFBox Library Overview The Apache PDFBox is an open source Java library for working with PDF documents. You can get more information about the project at pdfbox.</description>
    </item>
    
    <item>
      <title>Creating Bookmarks for PDF Document in Java with Apache PDFBox</title>
      <link>https://simplesolution.dev/creating-bookmarks-for-pdf-document-in-java-with-apache-pdfbox/</link>
      <pubDate>Wed, 01 Jan 2020 21:37:14 +0700</pubDate>
      
      <guid>https://simplesolution.dev/creating-bookmarks-for-pdf-document-in-java-with-apache-pdfbox/</guid>
      <description>Introduction In this tutorial we will learn how to add bookmark items to a PDF document in Java using Apache PDFBox library. The post also show how to add bookmarks for new PDF document and existing PDF file.
Apache PDFBox Library Overview The Apache PDFBox is an open source Java library for working with PDF documents. You can get more information about the project at pdfbox.apache.org
Adding Apache PDFBox Dependencies Adding below dependencies to build.</description>
    </item>
    
    <item>
      <title>Apache PDFBox Adding Metadata to PDF Document in Java</title>
      <link>https://simplesolution.dev/apache-pdfbox-adding-metadata-to-pdf-document-in-java/</link>
      <pubDate>Wed, 01 Jan 2020 15:34:11 +0700</pubDate>
      
      <guid>https://simplesolution.dev/apache-pdfbox-adding-metadata-to-pdf-document-in-java/</guid>
      <description>Introduction This toturial will show you how to adding metadata information such as title, creation date, modification date, author, creator tool, producer keywords etc. and custom properties to a new PDF document or the existing PDF file in Java using Apache PDFBox library.
Apache PDFBox Overview The Apache PDFBox is an open source library for working with PDF documents in Java. You can get more information about the project at pdfbox.</description>
    </item>
    
    <item>
      <title>Insert Image to PDF Document in Java using Apache PDFBox</title>
      <link>https://simplesolution.dev/insert-image-to-pdf-document-in-java-using-apache-pdfbox/</link>
      <pubDate>Mon, 30 Dec 2019 01:19:11 +0700</pubDate>
      
      <guid>https://simplesolution.dev/insert-image-to-pdf-document-in-java-using-apache-pdfbox/</guid>
      <description>Introduction In this tutorial we will learn how to create a PDF document using Apache PDFBox libary in Java and then insert an image to a PDF document page.
Apache PDFBox Overview The Apache PDFBox is an open source library for working with PDF documents in Java. You can get more information about the project at pdfbox.apache.org
Adding Apache PDFBox Dependencies Adding below dependencies to build.gradle file if you are using Gradle build tool.</description>
    </item>
    
    <item>
      <title>Creating PDF Document File in Java using Apache PDFBox</title>
      <link>https://simplesolution.dev/creating-pdf-document-file-in-java-using-apache-pdfbox/</link>
      <pubDate>Sun, 29 Dec 2019 10:26:47 +0700</pubDate>
      
      <guid>https://simplesolution.dev/creating-pdf-document-file-in-java-using-apache-pdfbox/</guid>
      <description>Introduction In this tutorial we will learn how to create a PDF document file in Java application using Apache PDFBox library.
Apache PDFBox Overview The Apache PDFBox is an open source library for working with PDF documents in Java. You can get more information about the project at pdfbox.apache.org
   (adsbygoogle = window.adsbygoogle || []).push({});  Adding Apache PDFBox Dependencies Adding below dependencies to build.gradle file if you are using Gradle build tool.</description>
    </item>
    
  </channel>
</rss>