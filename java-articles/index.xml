<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java-articles on Simple Solution</title>
    <link>https://simplesolution.dev/java-articles/</link>
    <description>Recent content in Java-articles on Simple Solution</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 25 Jan 2021 01:18:48 +0700</lastBuildDate>
    
	<atom:link href="https://simplesolution.dev/java-articles/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java Enum with Values Getter methods and Constructor</title>
      <link>https://simplesolution.dev/java-enum-with-values-getter-methods-and-constructor/</link>
      <pubDate>Mon, 25 Jan 2021 01:18:48 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-enum-with-values-getter-methods-and-constructor/</guid>
      <description>In this Java core tutorial, we learn how to define a new enum in Java with constructor and getter methods.
   (adsbygoogle = window.adsbygoogle || []).push({});  Define new enum with constructor and getter methods. ResultCode.java public enum ResultCode { SUCCESS(200, &amp;#34;Success&amp;#34;), FAILED(500, &amp;#34;Server Error&amp;#34;), VALIDATE_FAILED(404,&amp;#34;Validated Failed&amp;#34;), UNAUTHORIZED(11,&amp;#34;Un Authorized&amp;#34;), FORBIDDEN(11,&amp;#34;Forbidden&amp;#34;); private int code; private String message; private ResultCode(int code, String message) { this.code = code; this.message = message; } public int getCode() { return code; } public String getMessage() { return message; } }</description>
    </item>
    
    <item>
      <title>Connect to MongoDB Database in Java using MongoDB Driver Sync</title>
      <link>https://simplesolution.dev/java-mongodb-driver-sync-connect-to-mongodb-database/</link>
      <pubDate>Mon, 25 Jan 2021 00:20:10 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-mongodb-driver-sync-connect-to-mongodb-database/</guid>
      <description>In this Java MongoDB tutorial, we learn how to use MongoDB Drive Sync library to connect to a MongoDB database.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add MongoDB Synchronous Driver to your Java project To use the MongoDB Synchronous Driver Java library in the Gradle build project, add the following dependency into the build.gradle file.
compile group: &amp;#39;org.mongodb&amp;#39;, name: &amp;#39;mongodb-driver-sync&amp;#39;, version: &amp;#39;4.2.0&amp;#39; To use the MongoDB Synchronous Driver Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Joda Time Interval by Examples in Java</title>
      <link>https://simplesolution.dev/java-joda-time-interval-by-examples/</link>
      <pubDate>Fri, 22 Jan 2021 20:44:28 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-joda-time-interval-by-examples/</guid>
      <description>In this Java Joda-Time tutorial, we learn how to use the org.joda.time.Interval class of Joda-Time library by different example Java programs.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add Joda Time library to your Java project To use Joda Time Java library in the Gradle build project, add the following dependency into the build.gradle file.
compile group: &amp;#39;joda-time&amp;#39;, name: &amp;#39;joda-time&amp;#39;, version: &amp;#39;2.10.9&amp;#39; To use Joda Time Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Get User Home Directory in Java</title>
      <link>https://simplesolution.dev/java-get-user-home-directory/</link>
      <pubDate>Fri, 22 Jan 2021 01:01:39 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-get-user-home-directory/</guid>
      <description>In this Java core tutorial, we learn how to get the user home directory in the Java program.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to use System.getProperty() static method to get user home directory GetUserHome.java public class GetUserHome { public static void main(String[] args) { String userHomeDirectory = System.getProperty(&amp;#34;user.home&amp;#34;); System.out.println(&amp;#34;User Home Directory: &amp;#34; + userHomeDirectory); } } The output is: User Home Directory: C:\Users\SimpleS
Related Articles Get Operating System Name in Java</description>
    </item>
    
    <item>
      <title>Get Java Version</title>
      <link>https://simplesolution.dev/java-get-version/</link>
      <pubDate>Fri, 22 Jan 2021 00:42:51 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-get-version/</guid>
      <description>In this Java core tutorial, we learn how to get the Java version in a Java program.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to use System.getProperty() static method to get Java version GetJavaVersion.java public class GetJavaVersion { public static void main(String[] args) { String jdkVersion = System.getProperty(&amp;#34;java.version&amp;#34;); System.out.println(&amp;#34;Java version: &amp;#34; + jdkVersion); } } The output is: Java version: 14.0.1
Happy Coding ðŸ˜Š
Related Articles Get Operating System Name in Java</description>
    </item>
    
    <item>
      <title>Joda Time Period by Examples in Java</title>
      <link>https://simplesolution.dev/java-joda-time-period-by-examples/</link>
      <pubDate>Thu, 21 Jan 2021 21:35:28 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-joda-time-period-by-examples/</guid>
      <description>In this Java tutorial, we learn how to use the org.joda.time.Period class of Joda-Time library by different example Java programs.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add Joda Time library to your Java project To use Joda Time Java library in the Gradle build project, add the following dependency into the build.gradle file.
compile group: &amp;#39;joda-time&amp;#39;, name: &amp;#39;joda-time&amp;#39;, version: &amp;#39;2.10.9&amp;#39; To use Joda Time Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Joda-Time Gets Default Time Zone Names in Java</title>
      <link>https://simplesolution.dev/java-joda-time-get-default-time-zone-names/</link>
      <pubDate>Thu, 21 Jan 2021 01:24:08 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-joda-time-get-default-time-zone-names/</guid>
      <description>In this Joda-Time tutorial, we show you how to use Joda-Timeâ€™s DateTimeUtils class to get the list of default time zone names in a Java program.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add Joda Time library to your Java project To use Joda Time Java library in the Gradle build project, add the following dependency into the build.gradle file.
compile group: &amp;#39;joda-time&amp;#39;, name: &amp;#39;joda-time&amp;#39;, version: &amp;#39;2.10.9&amp;#39; To use Joda Time Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Get Date and Time fields value of Joda-Time DateTime object in Java</title>
      <link>https://simplesolution.dev/java-joda-time-get-date-time-fields-of-datetime/</link>
      <pubDate>Thu, 21 Jan 2021 00:58:41 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-joda-time-get-date-time-fields-of-datetime/</guid>
      <description>In this Joda-Time tutorial, we learn how to get specified date and time fields of a DateTime object such as year, month day, hour, minute, second, millisecond in Java.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add Joda Time library to your Java project To use Joda Time Java library in the Gradle build project, add the following dependency into the build.gradle file.
compile group: &amp;#39;joda-time&amp;#39;, name: &amp;#39;joda-time&amp;#39;, version: &amp;#39;2.</description>
    </item>
    
    <item>
      <title>Joda Time Duration by Examples in Java</title>
      <link>https://simplesolution.dev/java-joda-time-duration-by-examples/</link>
      <pubDate>Thu, 21 Jan 2021 00:02:17 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-joda-time-duration-by-examples/</guid>
      <description>In this Joda-Time tutorial, we learn how to use the org.joda.time.Duration class of Joda-Time library by different example Java programs.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add Joda Time library to your Java project To use Joda Time Java library in the Gradle build project, add the following dependency into the build.gradle file.
compile group: &amp;#39;joda-time&amp;#39;, name: &amp;#39;joda-time&amp;#39;, version: &amp;#39;2.10.9&amp;#39; To use Joda Time Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Generate Random UUID in Java</title>
      <link>https://simplesolution.dev/java-generate-random-uuid/</link>
      <pubDate>Wed, 20 Jan 2021 00:17:40 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-generate-random-uuid/</guid>
      <description>In this Java core tutorial, we learn how to use java.util.UUID class in Java to generate a random universally unique identifier (UUID).
   (adsbygoogle = window.adsbygoogle || []).push({});  In the following Java program, we show how to use UUID.randomUUID() static method to generate a new random UUID value.
GenerateRandomUUID.java import java.util.UUID; public class GenerateRandomUUID { public static void main(String[] args) { UUID uuid = UUID.randomUUID(); String uuidString = uuid.</description>
    </item>
    
    <item>
      <title>Joda-Time Create DateTime with Time End of the Day in Java</title>
      <link>https://simplesolution.dev/java-joda-time-create-datetime-with-time-end-of-day/</link>
      <pubDate>Tue, 19 Jan 2021 22:17:07 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-joda-time-create-datetime-with-time-end-of-day/</guid>
      <description>In this Joda-Time tutorial, we learn how to create a new DateTime object or convert an existing DateTime object to a new DateTime object with the time set to end of the day at 23:59:59.999 in Java.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add Joda Time library to your Java project To use Joda Time Java library in the Gradle build project, add the following dependency into the build.</description>
    </item>
    
    <item>
      <title>Compare Joda-Time DateTime using DateTimeComparator in Java</title>
      <link>https://simplesolution.dev/java-joda-time-compare-datetime-using-datetimecomparator/</link>
      <pubDate>Tue, 19 Jan 2021 21:10:25 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-joda-time-compare-datetime-using-datetimecomparator/</guid>
      <description>In this Joda-Time tutorial, we learn how to use Joda-Timeâ€™s DateTimeComparator class to compare DateTime objects. With different built-in comparators we will learn how to compare DateTime objects with different specified fields such as date, time or date and time.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add Joda Time library to your Java project To use Joda Time Java library in the Gradle build project, add the following dependency into the build.</description>
    </item>
    
    <item>
      <title>Format Joda-Time DateTime String using ISODateTimeFormat in Java</title>
      <link>https://simplesolution.dev/java-format-joda-time-datetime-string-using-isodatetimeformat/</link>
      <pubDate>Tue, 19 Jan 2021 00:56:38 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-format-joda-time-datetime-string-using-isodatetimeformat/</guid>
      <description>In this Joda-Time tutorial, we learn how to use the ISODateTimeFormat class of Joda-Time library to format the DateTime object into a String. With different built-in formatters of ISODateTimeFormat class we can format date time String in different format.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add Joda Time library to your Java project To use Joda Time Java library in the Gradle build project, add the following dependency into the build.</description>
    </item>
    
    <item>
      <title>Convert Joda-Time DateTime into Calendar and Vice Versa in Java</title>
      <link>https://simplesolution.dev/java-joda-time-convert-datetime-into-calendar-and-vice-versa/</link>
      <pubDate>Mon, 18 Jan 2021 22:45:17 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-joda-time-convert-datetime-into-calendar-and-vice-versa/</guid>
      <description>In this Joda-Time tutorial, we learn how to convert Joda-Timeâ€™s DateTime object into java.util.Calendar object and vice versa from java.util.Calendar object into Joda-Timeâ€™s DateTime object in Java.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add Joda Time library to your Java project To use Joda Time Java library in the Gradle build project, add the following dependency into the build.gradle file.
compile group: &amp;#39;joda-time&amp;#39;, name: &amp;#39;joda-time&amp;#39;, version: &amp;#39;2.</description>
    </item>
    
    <item>
      <title>Convert Joda-Time DateTime into String and Vice Versa in Java</title>
      <link>https://simplesolution.dev/java-joda-time-convert-datetime-into-string-and-vice-versa/</link>
      <pubDate>Mon, 18 Jan 2021 21:30:50 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-joda-time-convert-datetime-into-string-and-vice-versa/</guid>
      <description>In this Joda-Time tutorial, we learn how to convert Joda-Timeâ€™s DateTime object into String value and vice versa parse String value into Joda-Timeâ€™s DateTime object in Java.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add Joda Time library to your Java project To use Joda Time Java library in the Gradle build project, add the following dependency into the build.gradle file.
compile group: &amp;#39;joda-time&amp;#39;, name: &amp;#39;joda-time&amp;#39;, version: &amp;#39;2.</description>
    </item>
    
    <item>
      <title>Convert SQL Timestamp  into Joda-Time DateTime and Vice Versa in Java</title>
      <link>https://simplesolution.dev/java-joda-time-convert-timestamp-into-datetime-and-vice-versa/</link>
      <pubDate>Sun, 17 Jan 2021 18:21:04 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-joda-time-convert-timestamp-into-datetime-and-vice-versa/</guid>
      <description>In this Joda-Time tutorial, we learn how to convert an SQL Timestamp object into Joda-Timeâ€™ DateTime object and vice versace from Joda-Timeâ€™s DateTime into a Timestamp in Java.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add Joda Time library to your Java project To use Joda Time Java library in the Gradle build project, add the following dependency into the build.gradle file.
compile group: &amp;#39;joda-time&amp;#39;, name: &amp;#39;joda-time&amp;#39;, version: &amp;#39;2.</description>
    </item>
    
    <item>
      <title>Joda-Time Create DateTime with Time Start Of the Day in Java</title>
      <link>https://simplesolution.dev/java-joda-time-create-datetime-with-time-start-of-day/</link>
      <pubDate>Sun, 17 Jan 2021 17:12:06 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-joda-time-create-datetime-with-time-start-of-day/</guid>
      <description>In this Joda-Time tutorial, we learn how to create a new DateTime object or convert an existing DateTime object to a new DateTime object with the time set to start of the day at 00:00:00.000 in Java.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add Joda Time library to your Java project To use Joda Time Java library in the Gradle build project, add the following dependency into the build.</description>
    </item>
    
    <item>
      <title>Joda-Time Create UTC DateTime in Java</title>
      <link>https://simplesolution.dev/java-joda-time-create-utc-datetime/</link>
      <pubDate>Sun, 17 Jan 2021 16:42:17 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-joda-time-create-utc-datetime/</guid>
      <description>In this Joda-Time tutorial, we learn how to create a DateTime object to represent date and time in Universal Coordinated Time (UTC) time zone in Java.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add Joda Time library to your Java project To use Joda Time Java library in the Gradle build project, add the following dependency into the build.gradle file.
compile group: &amp;#39;joda-time&amp;#39;, name: &amp;#39;joda-time&amp;#39;, version: &amp;#39;2.10.9&amp;#39; To use Joda Time Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Convert Joda-Time DateTime into Date in Java</title>
      <link>https://simplesolution.dev/java-convert-joda-time-datetime-into-date/</link>
      <pubDate>Sun, 17 Jan 2021 16:03:12 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-convert-joda-time-datetime-into-date/</guid>
      <description>In this Joda-Time tutorial, we learn how to convert a Joda-Timeâ€™s DateTime object into a java.util.Date object in Java.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add Joda Time library to your Java project To use Joda Time Java library in the Gradle build project, add the following dependency into the build.gradle file.
compile group: &amp;#39;joda-time&amp;#39;, name: &amp;#39;joda-time&amp;#39;, version: &amp;#39;2.10.9&amp;#39; To use Joda Time Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Joda Time DateTime by Examples in Java</title>
      <link>https://simplesolution.dev/java-joda-time-datetime-by-examples/</link>
      <pubDate>Sun, 17 Jan 2021 13:15:15 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-joda-time-datetime-by-examples/</guid>
      <description>In this Java tutorial, we learn how to use the org.joda.time.DateTime class of Joda Time library by different example Java programs.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add Joda Time library to your Java project To use Joda Time Java library in the Gradle build project, add the following dependency into the build.gradle file.
compile group: &amp;#39;joda-time&amp;#39;, name: &amp;#39;joda-time&amp;#39;, version: &amp;#39;2.10.9&amp;#39; To use Joda Time Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Joda Time LocalDateTime by Examples in Java</title>
      <link>https://simplesolution.dev/java-joda-time-localdatetime-by-examples/</link>
      <pubDate>Sat, 16 Jan 2021 18:04:04 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-joda-time-localdatetime-by-examples/</guid>
      <description>In this Java tutorial, we learn how to use the org.joda.time.LocalDateTime class of Joda Time library by different example Java programs.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add Joda Time library to your Java project To use Joda Time Java library in the Gradle build project, add the following dependency into the build.gradle file.
compile group: &amp;#39;joda-time&amp;#39;, name: &amp;#39;joda-time&amp;#39;, version: &amp;#39;2.10.9&amp;#39; To use Joda Time Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Joda Time LocalTime by Examples in Java</title>
      <link>https://simplesolution.dev/java-joda-time-localtime-by-examples/</link>
      <pubDate>Sat, 16 Jan 2021 11:51:22 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-joda-time-localtime-by-examples/</guid>
      <description>In this Java tutorial, we learn how to use the org.joda.time.LocalTime class of Joda Time library by different example Java programs.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add Joda Time library to your Java project To use Joda Time Java library in the Gradle build project, add the following dependency into the build.gradle file.
compile group: &amp;#39;joda-time&amp;#39;, name: &amp;#39;joda-time&amp;#39;, version: &amp;#39;2.10.9&amp;#39; To use Joda Time Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Joda Time LocalDate by Examples in Java</title>
      <link>https://simplesolution.dev/java-joda-time-localdate-by-examples/</link>
      <pubDate>Fri, 15 Jan 2021 21:54:01 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-joda-time-localdate-by-examples/</guid>
      <description>In this Java tutorial, we learn how to use the org.joda.time.LocalDate class of Joda Time library by different example Java programs.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add Joda Time library to your Java project To use Joda Time Java library in the Gradle build project, add the following dependency into the build.gradle file.
compile group: &amp;#39;joda-time&amp;#39;, name: &amp;#39;joda-time&amp;#39;, version: &amp;#39;2.10.9&amp;#39; To use Joda Time Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Joda Time Instant by Examples in Java</title>
      <link>https://simplesolution.dev/java-joda-time-instant-by-examples/</link>
      <pubDate>Thu, 14 Jan 2021 00:45:06 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-joda-time-instant-by-examples/</guid>
      <description>In this Java tutorial, we learn how to use the org.joda.time.Instant class of Joda Time library by different example Java programs.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add Joda Time library to your Java project To use Joda Time Java library in the Gradle build project, add the following dependency into the build.gradle file.
compile group: &amp;#39;joda-time&amp;#39;, name: &amp;#39;joda-time&amp;#39;, version: &amp;#39;2.10.9&amp;#39; To use Joda Time Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Get Operating System Name in Java</title>
      <link>https://simplesolution.dev/java-get-os-name/</link>
      <pubDate>Tue, 12 Jan 2021 01:14:00 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-get-os-name/</guid>
      <description>In this Java core tutorial, we learn how to get the operating system name in a Java program.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to use System.getProperty() static method to get OS name public class Example { public static void main(String[] args) { String osName = System.getProperty(&amp;#34;os.name&amp;#34;); System.out.println(osName); } } The output is: Windows 10
Happy Coding ðŸ˜Š
Related Articles Get Java Version
Get User Home Directory in Java</description>
    </item>
    
    <item>
      <title>Extract .zip File in Java using Apache Commons Compress</title>
      <link>https://simplesolution.dev/java-extract-zip-file-using-apache-commons-compress/</link>
      <pubDate>Mon, 11 Jan 2021 01:16:12 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-extract-zip-file-using-apache-commons-compress/</guid>
      <description>In this Java tutorial, we learn how to use the Apache Commons Compress library to extract a .zip file into a directory in the Java program.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add Apache Commons Compress library to your Java project To use Apache Commons Compress Java library in the Gradle build project, add the following dependency into the build.gradle file.
compile group: &amp;#39;org.apache.commons&amp;#39;, name: &amp;#39;commons-compress&amp;#39;, version: &amp;#39;1.</description>
    </item>
    
    <item>
      <title>Create .zip File in Java using Apache Commons Compress</title>
      <link>https://simplesolution.dev/java-create-zip-file-using-apache-commons-compress/</link>
      <pubDate>Mon, 11 Jan 2021 01:15:48 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-create-zip-file-using-apache-commons-compress/</guid>
      <description>In this Java tutorial, we learn how to use the Apache Commons Compress library to create a .zip file in the Java program.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add Apache Commons Compress library to your Java project To use Apache Commons Compress Java library in the Gradle build project, add the following dependency into the build.gradle file.
compile group: &amp;#39;org.apache.commons&amp;#39;, name: &amp;#39;commons-compress&amp;#39;, version: &amp;#39;1.20&amp;#39; To use Apache Commons Compress Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Sort Map by Key in Java</title>
      <link>https://simplesolution.dev/java-sort-map-by-key/</link>
      <pubDate>Sat, 09 Jan 2021 17:22:53 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-sort-map-by-key/</guid>
      <description>In this Java core tutorial, we show you how to implement the Java method to sort elements of a Map object by its entry key in the Java program.
   (adsbygoogle = window.adsbygoogle || []).push({});  Implement method to sort a map by key Firstly, create a new class named MapUtils and implement a method sortMapByKey() which expects a Map as argument and returns a sorted Map.</description>
    </item>
    
    <item>
      <title>Sort Map by Value in Java</title>
      <link>https://simplesolution.dev/java-sort-map-by-value/</link>
      <pubDate>Sat, 09 Jan 2021 16:55:21 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-sort-map-by-value/</guid>
      <description>In this Java core tutorial, we show you how to implement the Java method to sort elements of a Map object by its entry value in the Java program.
   (adsbygoogle = window.adsbygoogle || []).push({});  Implement method to sort a map by value Firstly, create a new class named MapUtils and implement a method sortMapByValue() which expects a Map as argument and returns a sorted Map.</description>
    </item>
    
    <item>
      <title>Validate String Minimum and Maximum Length in Java</title>
      <link>https://simplesolution.dev/java-validate-string-min-max-length/</link>
      <pubDate>Sat, 09 Jan 2021 12:08:15 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-validate-string-min-max-length/</guid>
      <description>In this Java core tutorial, we learn how to implement a method to validate a String with minimum and maximum length.
   (adsbygoogle = window.adsbygoogle || []).push({});  Implement utility class to validate String length First step, we implement a new class named StringUtils with a method isValidLength() to check whether a String value is valid in minimum and maximum length or not.
StringUtils.java public class StringUtils { public static boolean isValidLength(String value, int minLength, int maxLength) { if(value == null) { return false; } int length = value.</description>
    </item>
    
    <item>
      <title>Validate Email Address in Java</title>
      <link>https://simplesolution.dev/java-validate-email-address/</link>
      <pubDate>Sat, 09 Jan 2021 11:14:18 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-validate-email-address/</guid>
      <description>In this Java core tutorial, we learn how to use the regular expression in Java to check whether an email address is valid or not.
   (adsbygoogle = window.adsbygoogle || []).push({});  Implement EmailUtils class At this step we implement a new class named EmailUtils with a static method isValidEmail() to validate email address String. The method expects an email address String as augment and returns boolean value whether the email address is valid or not.</description>
    </item>
    
    <item>
      <title>Check a String Is a Valid Integer in Java</title>
      <link>https://simplesolution.dev/java-check-string-is-valid-integer/</link>
      <pubDate>Thu, 07 Jan 2021 23:23:10 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-check-string-is-valid-integer/</guid>
      <description>In this Java core tutorial, we learn how to check if a String value is a valid integer value or not in Java program.
   (adsbygoogle = window.adsbygoogle || []).push({});  Implement isValidInteger() method In the following Java code, we implement a method to check if a given String is a valid integer or not and return the result in boolean value.
The method uses Javaâ€™s Integer.parseInt() static method to try to parse the String value, in case it is the invalid integer String the Exception throws then our method returns false value.</description>
    </item>
    
    <item>
      <title>Get Current Time in Java</title>
      <link>https://simplesolution.dev/java-current-time/</link>
      <pubDate>Thu, 07 Jan 2021 22:13:31 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-current-time/</guid>
      <description>In this Java core tutorial, we learn how to get current time in milliseconds in a Java program.
   (adsbygoogle = window.adsbygoogle || []).push({});  Using System.currentTimeMillis() static method CurrentTimeExample.java public class CurrentTimeExample { public static void main(String[] args) { long currentTime = System.currentTimeMillis(); System.out.println(currentTime + &amp;#34; Milliseconds&amp;#34;); } } The output is: 1610032553435 Milliseconds
Happy Coding ðŸ˜Š</description>
    </item>
    
    <item>
      <title>Parse String into Integer value in Java</title>
      <link>https://simplesolution.dev/java-parse-string-into-integer/</link>
      <pubDate>Thu, 07 Jan 2021 21:38:31 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-parse-string-into-integer/</guid>
      <description>In this Java core tutorial, we learn how to convert a String value into int value in Java application.
   (adsbygoogle = window.adsbygoogle || []).push({});  Using Integer.parseInt() static method Following Java example using Integer.parseInt() static method to convert a String value into int value.
ParseStringToIntExample1.java public class ParseStringToIntExample1 { public static void main(String[] args) { int result1 = Integer.parseInt(&amp;#34;1234&amp;#34;); int result2 = Integer.parseInt(&amp;#34;+5&amp;#34;); int result3 = Integer.</description>
    </item>
    
    <item>
      <title>Spring Boot Console Application using CommandLineRunner</title>
      <link>https://simplesolution.dev/spring-boot-console-application-commandlinerunner/</link>
      <pubDate>Wed, 06 Jan 2021 22:57:36 +0700</pubDate>
      
      <guid>https://simplesolution.dev/spring-boot-console-application-commandlinerunner/</guid>
      <description>In this Spring Boot tutorial, we are going to learn how to create a console application with Spring Boot using CommandLineRunner interface.
   (adsbygoogle = window.adsbygoogle || []).push({});  Create New Spring Boot Project Open Spring Tool Suite IDE, select menu File &amp;gt; New &amp;gt; Spring Starter Project.
On the New Spring Starter Project popup input new project information as below and click Next.
 Name: spring-boot-console-application Group: dev.</description>
    </item>
    
    <item>
      <title>Read and Parse CSV File in Java using Apache Commons CSV</title>
      <link>https://simplesolution.dev/java-read-and-parse-csv-file-using-apache-commons-csv/</link>
      <pubDate>Thu, 17 Dec 2020 00:06:32 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-read-and-parse-csv-file-using-apache-commons-csv/</guid>
      <description>In this tutorial, we learn how to parse CSV files in a Java application using Apache Commons CSV library. Via different Java code examples we learn how to create the CSV parser from File, InputStream, Path or Reader objects.
Add Apache Commons CSV library to your Java project To use Apache Commons CSV Java library in the Gradle build project, add the following dependency into the build.gradle file. compile group: &amp;#39;org.</description>
    </item>
    
    <item>
      <title>Read and Parse CSV Content from an URL in Java using Apache Commons CSV</title>
      <link>https://simplesolution.dev/java-read-and-parse-csv-file-from-url-using-apache-commons-csv/</link>
      <pubDate>Wed, 16 Dec 2020 22:41:39 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-read-and-parse-csv-file-from-url-using-apache-commons-csv/</guid>
      <description>In this tutorial, we are going to show how to read and parse CSV content from an URL using Apache Commons CSV library.
Add Apache Commons CSV library to your Java project To use Apache Commons CSV Java library in the Gradle build project, add the following dependency into the build.gradle file. compile group: &amp;#39;org.apache.commons&amp;#39;, name: &amp;#39;commons-csv&amp;#39;, version: &amp;#39;1.8&amp;#39;
To use Apache Commons CSV Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Read and Parse CSV Content from a String in Java using Apache Commons CSV</title>
      <link>https://simplesolution.dev/java-read-and-parse-csv-string-using-apache-commons-csv/</link>
      <pubDate>Wed, 16 Dec 2020 21:01:18 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-read-and-parse-csv-string-using-apache-commons-csv/</guid>
      <description>In this tutorial, we are going to learn how to read and parse CSV content from a Java String using Apache Commons CSV library.
Add Apache Commons CSV library to your Java project To use Apache Commons CSV Java library in the Gradle build project, add the following dependency into the build.gradle file. compile group: &amp;#39;org.apache.commons&amp;#39;, name: &amp;#39;commons-csv&amp;#39;, version: &amp;#39;1.8&amp;#39;
To use Apache Commons CSV Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Write and Read CSV File in Java using Apache Commons CSV</title>
      <link>https://simplesolution.dev/java-write-read-csv-file-using-apache-commons-csv/</link>
      <pubDate>Wed, 16 Dec 2020 00:06:40 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-write-read-csv-file-using-apache-commons-csv/</guid>
      <description>In this tutorial, we are going to learn how to write and read CSV files in Java applications using Apache Commons CSV library.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add Apache Commons CSV library to your Java project To use Apache Commons CSV Java library in the Gradle build project, add the following dependency into the build.gradle file. compile group: &amp;#39;org.apache.commons&amp;#39;, name: &amp;#39;commons-csv&amp;#39;, version: &amp;#39;1.8&amp;#39;
To use Apache Commons CSV Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Spring Boot Download Excel File Export from MySQL Database</title>
      <link>https://simplesolution.dev/spring-boot-download-excel-file-export-from-mysql/</link>
      <pubDate>Thu, 10 Dec 2020 00:29:48 +0700</pubDate>
      
      <guid>https://simplesolution.dev/spring-boot-download-excel-file-export-from-mysql/</guid>
      <description>Introduction In this tutorial, we are going to learn how to implement a download function for a Spring Boot web application to allow users download excel files, which the Excel file content export from a MySQL database table. Via step by step tutorial we learn how to implement the feature using different Java libraries such as Apache POI, Spring Data JPA, Spring Web, etc.
   (adsbygoogle = window.</description>
    </item>
    
    <item>
      <title>Create Temporary File in Java</title>
      <link>https://simplesolution.dev/java-create-temporary-file/</link>
      <pubDate>Wed, 02 Dec 2020 23:38:36 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-create-temporary-file/</guid>
      <description>In this tutorial, we are going to learn how to create a new temporary file in a Java program by using core Java API.
   (adsbygoogle = window.adsbygoogle || []).push({});  Using Java NIO Files.createTempFile() method to create temporary file The following Java example program to create a new temporary file in the default temporary directory in your machine. In order to create a new temp file you need to provide file name prefix and file extension (or file suffix), the method creates a new file with a unique name in your temporary directory.</description>
    </item>
    
    <item>
      <title>Convert Array to List in Java</title>
      <link>https://simplesolution.dev/java-convert-array-to-list/</link>
      <pubDate>Tue, 01 Dec 2020 23:15:18 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-convert-array-to-list/</guid>
      <description>In this tutorial, we are going to show how to convert an array in Java into a List object. We show different example programs that use core Java APIs to convert arrays in different Java versions.
Using Arrays.asList() method In this Java example program, we use the method Arrays.asList() to create an ArrayList object from an array. import java.util.Arrays; import java.util.List; public class ArrayToListExample1 { public static void main(String[] args) { String[] inputArray = {&amp;#34;Simple&amp;#34;, &amp;#34;Solution&amp;#34;, &amp;#34;Java&amp;#34;, &amp;#34;Array&amp;#34;}; List&amp;lt;String&amp;gt; list = Arrays.</description>
    </item>
    
    <item>
      <title>Convert HTML into Plain Text in Java using jsoup</title>
      <link>https://simplesolution.dev/java-convert-html-into-plain-text-using-jsoup/</link>
      <pubDate>Mon, 30 Nov 2020 21:58:08 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-convert-html-into-plain-text-using-jsoup/</guid>
      <description>Introduction In this tutorial, we are going to show how to use jsoup library to convert HTML content into plain text without HTML tag in a Java application.
Add jsoup library to your Java project To use jsoup Java library in the Gradle build project, add the following dependency into the build.gradle file. compile &amp;#39;org.jsoup:jsoup:1.13.1&amp;#39;
To use jsoup Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Get File System Information in Java using OSHI library</title>
      <link>https://simplesolution.dev/java-get-file-system-information-oshi-library/</link>
      <pubDate>Thu, 05 Nov 2020 21:43:31 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-get-file-system-information-oshi-library/</guid>
      <description>Introduction In this tutorial, we learn how to access file system information in Java applications with OSHI library. By different Java examples we show how to get information on file storage of a computer system.
Add OSHI library to the Java project To use OSHI Java library in the Gradle build project, add the following dependency into the build.gradle file. compile group: &amp;#39;com.github.oshi&amp;#39;, name: &amp;#39;oshi-core&amp;#39;, version: &amp;#39;5.3.4&amp;#39;
To use OSHI Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Get Virtual Memory Information in Java using OSHI library</title>
      <link>https://simplesolution.dev/java-virtual-memory-information-oshi-library/</link>
      <pubDate>Wed, 04 Nov 2020 23:32:58 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-virtual-memory-information-oshi-library/</guid>
      <description>Introduction In this tutorial, we show how to get virtual memory information of the computer in Java application with OSHI library.
Add OSHI library to the Java project To use OSHI Java library in the Gradle build project, add the following dependency into the build.gradle file. compile group: &amp;#39;com.github.oshi&amp;#39;, name: &amp;#39;oshi-core&amp;#39;, version: &amp;#39;5.3.4&amp;#39;
To use OSHI Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Get Physical Memory or RAM Information in Java using OSHI library</title>
      <link>https://simplesolution.dev/java-get-physical-memory-ram-information-oshi-library/</link>
      <pubDate>Wed, 04 Nov 2020 22:31:48 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-get-physical-memory-ram-information-oshi-library/</guid>
      <description>Introduction In this tutorial, we are going to explore how to use the OSHI library to get information about the physical memory (RAM) information of the computer in a Java application. By using the API provided by OSHI Java library we will write programs to show memory of the computer and information of all physical devices located on the computer.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add OSHI library to the Java project To use OSHI Java library in the Gradle build project, add the following dependency into the build.</description>
    </item>
    
    <item>
      <title>Get CPU Information in Java using OSHI library</title>
      <link>https://simplesolution.dev/java-get-cpu-information-oshi-library/</link>
      <pubDate>Tue, 03 Nov 2020 22:44:31 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-get-cpu-information-oshi-library/</guid>
      <description>Introduction In this tutorial, we explore how to use the OSHI library in Java program to get CPU details information. Via the OSHI APIs we show how to get all information of a Central Processing Unit (CPU) such as name, number of cores, vendor, model, family, etc.
   (adsbygoogle = window.adsbygoogle || []).push({});  What is OSHI? OSHI is a free JNA-based (native) Operating System and Hardware Information library for Java.</description>
    </item>
    
    <item>
      <title>Get Operating System Information in Java using OSHI library</title>
      <link>https://simplesolution.dev/java-get-operating-system-information-oshi-library/</link>
      <pubDate>Tue, 03 Nov 2020 01:43:18 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-get-operating-system-information-oshi-library/</guid>
      <description>Introduction In this tutorial, we show you how to use OSHI library in a Java program to get operating system information. By different example Java programs we learn how to get information of operating system name, version, manufacturer, etc.
   (adsbygoogle = window.adsbygoogle || []).push({});  What is OSHI? OSHI is a free JNA-based (native) Operating System and Hardware Information library for Java. It does not require the installation of any additional native libraries and aims to provide a cross-platform implementation to retrieve system information, such as OS version, processes, memory and CPU usage, disks and partitions, devices, sensors, etc.</description>
    </item>
    
    <item>
      <title>Pretty Print XML String and XML File in Java using jsoup</title>
      <link>https://simplesolution.dev/java-jsoup-pretty-print-xml-string-and-file/</link>
      <pubDate>Sun, 01 Nov 2020 23:28:25 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-jsoup-pretty-print-xml-string-and-file/</guid>
      <description>In this tutorial, we are going to show how to use the jsoup library in a Java program to pretty sprint a XML String or XML file content. We provide different working Java programs to show different use cases on how to parse XML String or XML File into jsoup Document object in order to format the XML content for pretty printing.
   (adsbygoogle = window.adsbygoogle || []).</description>
    </item>
    
    <item>
      <title>jsoup Get All HTML Elements in Java</title>
      <link>https://simplesolution.dev/java-jsoup-get-all-html-elements/</link>
      <pubDate>Sun, 01 Nov 2020 13:48:35 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-jsoup-get-all-html-elements/</guid>
      <description>In this post, we are going to learn how to use jsoup Java library to find all HTML elements in a HTML document.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add jsoup library to your Java project To use jsoup Java library in the Gradle build project, add the following dependency into the build.gradle file. compile &amp;#39;org.jsoup:jsoup:1.13.1&amp;#39;
To use jsoup Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Clean HTML String to get Safe HTML from Untrusted HTML in Java using jsoup</title>
      <link>https://simplesolution.dev/java-jsoup-clean-html-string-get-safe-html-from-untrusted-html/</link>
      <pubDate>Sat, 31 Oct 2020 22:44:54 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-jsoup-clean-html-string-get-safe-html-from-untrusted-html/</guid>
      <description>Introduction The jsoup library provides static methods Jsoup.clean() to allow cleaning the HTML String from untrusted input. This feature can be used to sanitizer input of your web application in order to prevent XSS attacks. In this tutorial, we show you how to use this feature to get the safe HTML String from an untrusted HTML input.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add jsoup library to your Java project To use jsoup Java library in the Gradle build project, add the following dependency into the build.</description>
    </item>
    
    <item>
      <title>jsoup Get HTML Elements by Attribute Value in Java</title>
      <link>https://simplesolution.dev/java-jsoup-get-html-elements-by-attribute-value/</link>
      <pubDate>Sat, 31 Oct 2020 10:22:31 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-jsoup-get-html-elements-by-attribute-value/</guid>
      <description>In this post, we explore the different methods provided by jsoup Java library that allow finding HTML elements by attribute value.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add jsoup library to your Java project To use jsoup Java library in the Gradle build project, add the following dependency into the build.gradle file. compile &amp;#39;org.jsoup:jsoup:1.13.1&amp;#39;
To use jsoup Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>jsoup Get HTML Elements by Attribute Name in Java</title>
      <link>https://simplesolution.dev/java-jsoup-get-html-elements-by-attribute-name/</link>
      <pubDate>Sat, 31 Oct 2020 00:16:23 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-jsoup-get-html-elements-by-attribute-name/</guid>
      <description>In this post, we are going to use the jsoup library to find HTML elements by attribute name in a Java program.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add jsoup library to your Java project To use jsoup Java library in the Gradle build project, add the following dependency into the build.gradle file. compile &amp;#39;org.jsoup:jsoup:1.13.1&amp;#39;
To use jsoup Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>jsoup Get HTML Elements by Tag Name in Java</title>
      <link>https://simplesolution.dev/java-jsoup-get-html-elements-by-tag-name/</link>
      <pubDate>Fri, 30 Oct 2020 22:54:50 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-jsoup-get-html-elements-by-tag-name/</guid>
      <description>In this post, we are going to use jsoup Java library to find HTML elements by HTML tag name.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add jsoup library to your Java project To use jsoup Java library in the Gradle build project, add the following dependency into the build.gradle file. compile &amp;#39;org.jsoup:jsoup:1.13.1&amp;#39;
To use jsoup Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>jsoup Get HTML Element by ID in Java</title>
      <link>https://simplesolution.dev/java-jsoup-get-html-element-by-id/</link>
      <pubDate>Fri, 30 Oct 2020 21:45:50 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-jsoup-get-html-element-by-id/</guid>
      <description>In this post, we will learn how to find an element in an HTML document by its ID in a Java application using jsoup library.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add jsoup library to your Java project To use jsoup Java library in the Gradle build project, add the following dependency into the build.gradle file. compile &amp;#39;org.jsoup:jsoup:1.13.1&amp;#39;
To use jsoup Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>jsoup Get HTML elements by CSS class name in Java</title>
      <link>https://simplesolution.dev/java-jsoup-get-html-elements-by-css-class-name/</link>
      <pubDate>Thu, 29 Oct 2020 23:51:06 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-jsoup-get-html-elements-by-css-class-name/</guid>
      <description>In this post, we are going to learn how to use jsoup Java library to get all HTML elements by CSS class name.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add jsoup library to your Java project To use jsoup Java library in the Gradle build project, add the following dependency into the build.gradle file. compile &amp;#39;org.jsoup:jsoup:1.13.1&amp;#39;
To use jsoup Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Extract All Links of a web page in Java using jsoup</title>
      <link>https://simplesolution.dev/java-jsoup-extract-all-links-of-web-page/</link>
      <pubDate>Thu, 29 Oct 2020 23:06:07 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-jsoup-extract-all-links-of-web-page/</guid>
      <description>In this post, we show you how to extract all links from a web page using jsoup Java library.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add jsoup library to your Java project To use jsoup Java library in the Gradle build project, add the following dependency into the build.gradle file. compile &amp;#39;org.jsoup:jsoup:1.13.1&amp;#39;
To use jsoup Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Pretty Printing HTML String in Java using jsoup</title>
      <link>https://simplesolution.dev/java-pretty-printing-html-string-jsoup/</link>
      <pubDate>Thu, 29 Oct 2020 21:44:36 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-pretty-printing-html-string-jsoup/</guid>
      <description>In this post, we are going to use jsoup Java library to pretty print a HTML string.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add jsoup library to your Java project To use jsoup Java library in the Gradle build project, add the following dependency into the build.gradle file. compile &amp;#39;org.jsoup:jsoup:1.13.1&amp;#39;
To use jsoup Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>jsoup extract Website Title in Java</title>
      <link>https://simplesolution.dev/java-jsoup-extract-website-title/</link>
      <pubDate>Wed, 28 Oct 2020 23:30:05 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-jsoup-extract-website-title/</guid>
      <description>In this post, we show you how to use the jsoup library in a Java application to extract the title of a website.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add jsoup library to your Java project To use jsoup Java library in the Gradle build project, add the following dependency into the build.gradle file. compile &amp;#39;org.jsoup:jsoup:1.13.1&amp;#39;
To use jsoup Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>jsoup extract custom data attributes of HTML5 Element in Java</title>
      <link>https://simplesolution.dev/java-jsoup-extract-custom-data-attributes-html5-element/</link>
      <pubDate>Wed, 28 Oct 2020 21:21:20 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-jsoup-extract-custom-data-attributes-html5-element/</guid>
      <description>In this post, we learn how to use jsoup Java library to extract HTML5 custom data attributes.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add jsoup library to your Java project To use jsoup Java library in the Gradle build project, add the following dependency into the build.gradle file. compile &amp;#39;org.jsoup:jsoup:1.13.1&amp;#39;
To use jsoup Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>jsoup extract Inner and Outer HTML of HTML Element in Java</title>
      <link>https://simplesolution.dev/java-jsoup-extract-inner-outer-html/</link>
      <pubDate>Wed, 28 Oct 2020 20:52:00 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-jsoup-extract-inner-outer-html/</guid>
      <description>In this post, we learn how to use jsoup Java library to extract inner or outer HTML of an element in a HTML document.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add jsoup library to your Java project To use jsoup Java library in the Gradle build project, add the following dependency into the build.gradle file. compile &amp;#39;org.jsoup:jsoup:1.13.1&amp;#39;
To use jsoup Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>jsoup extract JavaScript from HTML script element in Java</title>
      <link>https://simplesolution.dev/java-jsoup-extract-javascript-from-script-element/</link>
      <pubDate>Tue, 27 Oct 2020 23:53:13 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-jsoup-extract-javascript-from-script-element/</guid>
      <description>Introduction In this post, we are going to explore how to use the jsoup library in a Java application to extract JavaScript content of a script element in the HTML document.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add jsoup library to your Java project To use jsoup Java library in the Gradle build project, add the following dependency into the build.gradle file. compile &amp;#39;org.jsoup:jsoup:1.13.1&amp;#39;
To use jsoup Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>jsoup extract text and attributes of HTML element in Java</title>
      <link>https://simplesolution.dev/java-jsoup-extract-text-attributes-of-element/</link>
      <pubDate>Tue, 27 Oct 2020 23:43:13 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-jsoup-extract-text-attributes-of-element/</guid>
      <description>Introduction In this post, we are going to learn how to use the jsoup library in a Java application to extract text and other attributes of an element in the HTML document.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add jsoup library to your Java project To use jsoup Java library in the Gradle build project, add the following dependency into the build.gradle file. compile &amp;#39;org.jsoup:jsoup:1.13.1&amp;#39;
To use jsoup Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>jsoup extract ID and name of HTML element in Java</title>
      <link>https://simplesolution.dev/java-jsoup-extract-id-name-of-element/</link>
      <pubDate>Tue, 27 Oct 2020 23:27:03 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-jsoup-extract-id-name-of-element/</guid>
      <description>Introduction In this post, we are going to explore how to use jsoup library in a Java application to extract the ID or name attribute of an element in the HTML document.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add jsoup library to your Java project To use jsoup Java library in the Gradle build project, add the following dependency into the build.gradle file. compile &amp;#39;org.jsoup:jsoup:1.13.1&amp;#39;
To use jsoup Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>jsoup extract CSS class name of HTML element in Java</title>
      <link>https://simplesolution.dev/java-jsoup-extract-css-class-name-of-element/</link>
      <pubDate>Tue, 27 Oct 2020 23:17:15 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-jsoup-extract-css-class-name-of-element/</guid>
      <description>Introduction In this post, we are going to explore how to use jsoup library in a Java application to extract css class names of an element in the HTML document.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add jsoup library to your Java project To use jsoup Java library in the Gradle build project, add the following dependency into the build.gradle file. compile &amp;#39;org.jsoup:jsoup:1.13.1&amp;#39;
To use jsoup Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Read QR Code from Image File or Base64 String in Java using ZXing</title>
      <link>https://simplesolution.dev/java-read-qr-code-from-image-file-base64-zxing/</link>
      <pubDate>Mon, 26 Oct 2020 21:46:52 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-read-qr-code-from-image-file-base64-zxing/</guid>
      <description>Introduction In this tutorial, we are going to learn how to decode the QR code image to read the encoded text in a Java application. We will use ZXing open source library in order to decode the image. Via different Java code examples we show you how to extract text from an image file and from encoded base64 string image.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add ZXing library to the project To use ZXing Java library in the Gradle build project, add the following dependencies into the build.</description>
    </item>
    
    <item>
      <title>Generate QR Code in Java using ZXing</title>
      <link>https://simplesolution.dev/java-generate-qr-code-zxing/</link>
      <pubDate>Mon, 26 Oct 2020 00:29:28 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-generate-qr-code-zxing/</guid>
      <description>Introduction In this tutorial, we are going to learn how to generate QR code (abbreviated from Quick Response code) in a Java application. We will use ZXing (&amp;ldquo;zebra crossing&amp;rdquo;) library which is the most popular library to generate QR code in Java.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add ZXing library to the project To use ZXing Java library in the Gradle build project, add the following dependencies into the build.</description>
    </item>
    
    <item>
      <title>jsoup parse HTML Document from an URL in Java</title>
      <link>https://simplesolution.dev/java-jsoup-uparse-html-document-from-url/</link>
      <pubDate>Sun, 25 Oct 2020 16:05:47 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-jsoup-uparse-html-document-from-url/</guid>
      <description>Introduction In this tutorial we will explore how to use the jsoup library in Java program to parse HTML from a given URL into a jsoup Document object.
   (adsbygoogle = window.adsbygoogle || []).push({});  What is jsoup? jsoup is a Java library for working with real-world HTML. It provides a very convenient API for fetching URLs and extracting and manipulating data, using the best of HTML5 DOM methods and CSS selectors.</description>
    </item>
    
    <item>
      <title>jsoup parse HTML Document from a File and InputStream in Java</title>
      <link>https://simplesolution.dev/java-jsoup-parse-html-document-from-file-inputstream/</link>
      <pubDate>Sun, 25 Oct 2020 15:58:16 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-jsoup-parse-html-document-from-file-inputstream/</guid>
      <description>Introduction In this tutorial we will explore how to use the jsoup library in Java program to parse HTML from a local file or input stream into a jsoup Document object.
   (adsbygoogle = window.adsbygoogle || []).push({});  What is jsoup? jsoup is a Java library for working with real-world HTML. It provides a very convenient API for fetching URLs and extracting and manipulating data, using the best of HTML5 DOM methods and CSS selectors.</description>
    </item>
    
    <item>
      <title>jsoup parse HTML Document from a Java String</title>
      <link>https://simplesolution.dev/java-jsoup-parse-html-document-from-string/</link>
      <pubDate>Sun, 25 Oct 2020 15:25:45 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-jsoup-parse-html-document-from-string/</guid>
      <description>Introduction In this tutorial we will explore how to use the jsoup library in Java program to parse HTML from a Java String into jsoup Document object.
   (adsbygoogle = window.adsbygoogle || []).push({});  What is jsoup? jsoup is a Java library for working with real-world HTML. It provides a very convenient API for fetching URLs and extracting and manipulating data, using the best of HTML5 DOM methods and CSS selectors.</description>
    </item>
    
    <item>
      <title>Read Text Files in Java</title>
      <link>https://simplesolution.dev/java-read-text-files/</link>
      <pubDate>Sat, 24 Oct 2020 20:13:34 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-read-text-files/</guid>
      <description>Introduction In this tutorial we are going to explore how to read text files in a Java program. We provide different solutions to show how to use different Java core classes of Java IO and NIO packages to read files.
   (adsbygoogle = window.adsbygoogle || []).push({});  Java NIO Files.readAllLines() static method In this Java code example we use Files.readAllLines() method to read all lines from a file into a list of String.</description>
    </item>
    
    <item>
      <title>Spring Boot Web Application Export and Download JSON File</title>
      <link>https://simplesolution.dev/spring-boot-export-download-json-file/</link>
      <pubDate>Sat, 24 Oct 2020 12:50:59 +0700</pubDate>
      
      <guid>https://simplesolution.dev/spring-boot-export-download-json-file/</guid>
      <description>Introduction In this tutorial we are going to learn how to implement a Spring Boot web application to export JSON and allow users to download as a JSON file via web browser. Via step by step guide we show you how to implement an example web application to export a list of customers to a JSON file.
   (adsbygoogle = window.adsbygoogle || []).push({});  Create New Spring Boot Web Project From Spring Tool Suite IDE select menu File &amp;gt; New &amp;gt; Spring Starter Project.</description>
    </item>
    
    <item>
      <title>Spring Boot Web Application Export and Download Text File</title>
      <link>https://simplesolution.dev/spring-boot-export-download-text-file/</link>
      <pubDate>Sat, 24 Oct 2020 00:33:28 +0700</pubDate>
      
      <guid>https://simplesolution.dev/spring-boot-export-download-text-file/</guid>
      <description>Introduction In this tutorial we learn how to create a new text file and provide the user the web interface to download the text file in a Spring Boot web application. We will learn how to download a text file in Spring Boot with 5 different approaches to implement the feature.
   (adsbygoogle = window.adsbygoogle || []).push({});  Create New Spring Boot Web Project From Spring Tool Suite IDE select menu File &amp;gt; New &amp;gt; Spring Starter Project.</description>
    </item>
    
    <item>
      <title>Create New Files in Java</title>
      <link>https://simplesolution.dev/java-create-new-files/</link>
      <pubDate>Thu, 22 Oct 2020 23:58:42 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-create-new-files/</guid>
      <description>Introduction In this article we learn how to create a new file in a Java application by using core Java classes of IO and NIO packages.
   (adsbygoogle = window.adsbygoogle || []).push({});  Using Java NIO Files.createFile() static method import java.io.IOException; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; public class FilesCreateFileExample { public static void main(String... args) { try { String fileName = &amp;#34;D:\\Files\\test.txt&amp;#34;; Path filePath = Paths.get(fileName); Path createdFile = Files.</description>
    </item>
    
    <item>
      <title>Check Hidden Files in Java</title>
      <link>https://simplesolution.dev/java-check-hidden-files/</link>
      <pubDate>Thu, 22 Oct 2020 22:15:25 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-check-hidden-files/</guid>
      <description>Introduction In this post we are going to explore how to use Java IO and Java NIO core classes to check if a file is hidden or not.
For example we have a text file is a hidden file located at D:\Files\file.txt
   (adsbygoogle = window.adsbygoogle || []).push({});  Using Java NIO Files.isHidden() static method import java.io.IOException; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; public class FilesIsHiddenExample { public static void main(String.</description>
    </item>
    
    <item>
      <title>Write Text to a File in Java</title>
      <link>https://simplesolution.dev/java-write-text-file/</link>
      <pubDate>Wed, 21 Oct 2020 22:59:16 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-write-text-file/</guid>
      <description>Introduction In this tutorial we are going to learn how to write text to a text file in a Java application. By different Java example programs we will explore different approaches to write a String into a text file using Java core classes.
   (adsbygoogle = window.adsbygoogle || []).push({});  Using Java NIO Files.write() static method Following program to create a new file named test.txt and write text using Files.</description>
    </item>
    
    <item>
      <title>Get Absolute File Path of a File in Java</title>
      <link>https://simplesolution.dev/java-get-absolute-file-path/</link>
      <pubDate>Wed, 21 Oct 2020 01:26:45 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-get-absolute-file-path/</guid>
      <description>Introduction In this post we will explore how to get an absolute path of a file in a Java application and return it as a String value.
   (adsbygoogle = window.adsbygoogle || []).push({});  Using Java NIO Path.toAbsolutePath() method import java.nio.file.Path; import java.nio.file.Paths; public class PathToAbsolutePathExample { public static void main(String... args) { String fileName = &amp;#34;simple-solution-logo.png&amp;#34;; Path path = Paths.get(fileName); Path absolutePath = path.toAbsolutePath(); String absoluteFilePath = absolutePath.</description>
    </item>
    
    <item>
      <title>Spring Boot Access MySQL Database with Spring Data JPA</title>
      <link>https://simplesolution.dev/spring-boot-access-mysql-database-spring-data-jpa/</link>
      <pubDate>Tue, 20 Oct 2020 00:38:25 +0700</pubDate>
      
      <guid>https://simplesolution.dev/spring-boot-access-mysql-database-spring-data-jpa/</guid>
      <description>Introduction In this tutorial we walk you through step by step to create a Spring Boot application to access MySQL database using Spring Data JPA and MySQL Driver. Via step by step example we will create a Spring Boot project to save Customer entity into customer data table in MySQL database.
   (adsbygoogle = window.adsbygoogle || []).push({});  Create New Spring Boot Project From Spring Tool Suite IDE select menu File &amp;gt; New &amp;gt; Spring Starter Project.</description>
    </item>
    
    <item>
      <title>Get File Size in Java</title>
      <link>https://simplesolution.dev/java-get-file-size/</link>
      <pubDate>Sun, 18 Oct 2020 22:55:19 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-get-file-size/</guid>
      <description>Introduction In this post we are going to explore how to get file size in bytes, kilobytes, megabytes or gigabytes in different Java versions.
For example we have a file located at D:\SimpleSolution\logo.png as following screenshot.
   (adsbygoogle = window.adsbygoogle || []).push({});  Using NIO Files.size() method with Java version 7 and above import java.io.IOException; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; public class GetFileSizeExample1 { public static void main(String[] args) { try { String fileLocation = &amp;#34;D:\\SimpleSolution\\logo.</description>
    </item>
    
    <item>
      <title>Spring Boot Starter Data Redis for Data Storage on Redis Server</title>
      <link>https://simplesolution.dev/spring-boot-starter-data-redis-jedis-client/</link>
      <pubDate>Sun, 18 Oct 2020 14:35:26 +0700</pubDate>
      
      <guid>https://simplesolution.dev/spring-boot-starter-data-redis-jedis-client/</guid>
      <description>Introduction In this post, we are going to learn how to use Redis as data persistence for our Spring Boot Application by using Spring Boot Starter Data Redis and Jedis Client.
   (adsbygoogle = window.adsbygoogle || []).push({});  What is Redis? Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker. For more information you can visit Redis home page at redis.</description>
    </item>
    
    <item>
      <title>Spring Boot Implement AOP with Spring Boot Starter AOP</title>
      <link>https://simplesolution.dev/spring-boot-implement-aop-with-spring-boot-starter-aop/</link>
      <pubDate>Sat, 17 Oct 2020 20:10:24 +0700</pubDate>
      
      <guid>https://simplesolution.dev/spring-boot-implement-aop-with-spring-boot-starter-aop/</guid>
      <description>Introduction In this article, we learn how to implement AOP (Aspect-Oriented Programming) in a Spring Boot Web application. Via step by step to creating the sample Spring Boot web application, we are going to explore how to use Spring Boot Starter AOP library which is the combination of Spring AOP and AspectJ libraries to easily implement AOP in Spring Boot application.
   (adsbygoogle = window.adsbygoogle || []).push({});  Create New Spring Boot Web project From Spring Tool Suite IDE select menu File &amp;gt; New &amp;gt; Spring Starter Project.</description>
    </item>
    
    <item>
      <title>Spring Boot Web Get Client IP Address</title>
      <link>https://simplesolution.dev/spring-boot-web-get-client-ip-address/</link>
      <pubDate>Wed, 14 Oct 2020 23:08:54 +0700</pubDate>
      
      <guid>https://simplesolution.dev/spring-boot-web-get-client-ip-address/</guid>
      <description>Introduction In this article we are going to learn how to obtain the clientâ€™s browser IP address when a user visits our Spring Boot web application. The example Java source code also shows how to get the client IP address even when the application deployed behind the proxy server. We also get the IP address of the local network if the client visits the Spring Boot website via local network.</description>
    </item>
    
    <item>
      <title>Escape or Unescape String for CSV column data in Java using Apache Commons Text</title>
      <link>https://simplesolution.dev/java-escape-unescape-string-for-csv-column-data/</link>
      <pubDate>Thu, 08 Oct 2020 23:26:48 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-escape-unescape-string-for-csv-column-data/</guid>
      <description>Introduction In this post we are going to learn how to use StringEscapeUtils class in Apache Commons Text library to escape a String for CSV file format. If the input String value contains a comma, newline or double quote, then the output String value is returned enclosed in double quotes.
   (adsbygoogle = window.adsbygoogle || []).push({});  Setup Apache Commons Text in Java project If you are using Gradle build then add the following dependency configuration into build.</description>
    </item>
    
    <item>
      <title>Convert words in a String into camelCase in Java using Apache Commons Text</title>
      <link>https://simplesolution.dev/java-convert-words-in-a-string-into-camel-case/</link>
      <pubDate>Thu, 08 Oct 2020 22:31:54 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-convert-words-in-a-string-into-camel-case/</guid>
      <description>Introduction In this article we are going to explore Apache Commons Text library by using CaseUtils utility class to convert a String of separated words into a camelCase String.
   (adsbygoogle = window.adsbygoogle || []).push({});  Setup Apache Commons Text in Java project If you are using Gradle build then add the following dependency configuration into build.gradle file.
compile group: &amp;#39;org.apache.commons&amp;#39;, name: &amp;#39;commons-text&amp;#39;, version: &amp;#39;1.9&amp;#39; Or add the following dependency XML tag to pom.</description>
    </item>
    
    <item>
      <title>Substitute a String in Java by replace variables map to Template String using Apache Commons Text</title>
      <link>https://simplesolution.dev/java-substitute-a-string-in-java-by-replace-variables-map-to-template-string/</link>
      <pubDate>Wed, 07 Oct 2020 23:38:07 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-substitute-a-string-in-java-by-replace-variables-map-to-template-string/</guid>
      <description>Introduction In this post we are going to learn how to substitute a String in Java which replaces variables into placeholders in a template String. To do this task we will use the Apache Commons Text library with support of StringSubstitutor class. Via different Java example code we will learn how to apply StringSubstitutor in different scenarios in your Java applications.
   (adsbygoogle = window.adsbygoogle || []).push({});  Setup Apache Commons Text in Java project If you are using Gradle build then add the following dependency configuration into build.</description>
    </item>
    
    <item>
      <title>Uncapitalize first character of all words in a String in Java using Apache Commons Text</title>
      <link>https://simplesolution.dev/java-uncapitalize-first-character-of-all-words-in-a-string/</link>
      <pubDate>Wed, 07 Oct 2020 20:04:14 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-uncapitalize-first-character-of-all-words-in-a-string/</guid>
      <description>Introduction In this article we will explore the WordUtils.uncapitalize() method of Apache Commons Text library to uncapitalize a String. With Java code example we will learn how to use the WordUtils.uncapitalize() method to convert the first character of all words in a String to lowercase character.
   (adsbygoogle = window.adsbygoogle || []).push({});  Setup Apache Commons Text in Java project If you are using Gradle build then add the following dependency configuration into build.</description>
    </item>
    
    <item>
      <title>Swap Lowercase and Uppercase of a String in Java using Apache Commons Text</title>
      <link>https://simplesolution.dev/java-swap-lowercase-and-uppercase-of-a-string/</link>
      <pubDate>Tue, 06 Oct 2020 23:56:16 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-swap-lowercase-and-uppercase-of-a-string/</guid>
      <description>Introduction In this article we are going to learn how to swap the case of a String in Java application. We provide a Java code example to show how to use WordUtils.swapCase() method of Apache Commons Text library to swap the case of each character of a given String.
   (adsbygoogle = window.adsbygoogle || []).push({});  Setup Apache Commons Text in Java project If you are using Gradle build then add the following dependency configuration into build.</description>
    </item>
    
    <item>
      <title>Java extracts initial characters from each word in a String using Apache Commons Text</title>
      <link>https://simplesolution.dev/java-extracts-initial-characters-from-each-word-in-a-string/</link>
      <pubDate>Tue, 06 Oct 2020 23:20:52 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-extracts-initial-characters-from-each-word-in-a-string/</guid>
      <description>Introduction In this post we learn how to use WordUtils class of Apache Commons Text library to extract initial characters from all words of a String in Java. We will show the Java code example that uses WordUtils.initials() method to extract initial letters of people names.
   (adsbygoogle = window.adsbygoogle || []).push({});  Setup Apache Commons Text in Java project If you are using Gradle build then add the following dependency configuration into build.</description>
    </item>
    
    <item>
      <title>Java Checks if a String contains all words in array using Apache Commons Text</title>
      <link>https://simplesolution.dev/java-checks-if-a-string-contains-all-words-in-array/</link>
      <pubDate>Tue, 06 Oct 2020 22:41:54 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-checks-if-a-string-contains-all-words-in-array/</guid>
      <description>Introduction In this article we show how to check if a String contains all words in an array in Java. By using WordUtils utility class of Apache Commons Text library you can check if the String contains all words in the given array using containsAllWords() method.
   (adsbygoogle = window.adsbygoogle || []).push({});  Setup Apache Commons Text in Java project If you are using Gradle build then add the following dependency configuration into build.</description>
    </item>
    
    <item>
      <title>Wrap a line of text into multiple lines in Java using Apache Commons Text</title>
      <link>https://simplesolution.dev/java-wrap-a-line-of-text-into-multiple-lines/</link>
      <pubDate>Tue, 06 Oct 2020 20:34:43 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-wrap-a-line-of-text-into-multiple-lines/</guid>
      <description>Introduction In this post we learn how to wrap a String in Java using WordUtils utility class of Apache Commons Text library. By using WordUtils.wrap() method we can break a long line of text into multiple lines with a given input text and the length. The output String will be wrapped words and separated by system line separator character or by your custom provided separator.
   (adsbygoogle = window.</description>
    </item>
    
    <item>
      <title>Generate Random String in Java using Apache Commons Text</title>
      <link>https://simplesolution.dev/java-generate-random-string-with-random-string-generator/</link>
      <pubDate>Tue, 06 Oct 2020 00:04:09 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-generate-random-string-with-random-string-generator/</guid>
      <description>Introduction In this article we show how to generate random String values in Java using the RandomStringGenerator class of Apache Commons Text library. We provide multiple Java code examples with different settings to generate different kinds of data that may be useful for your daily programming scenarios.
   (adsbygoogle = window.adsbygoogle || []).push({});  Setup Apache Commons Text in Java project If you are using Gradle build then add the following dependency configuration into build.</description>
    </item>
    
    <item>
      <title>Capitalize First Letter of each Word of String in Java using Apache Commons Text</title>
      <link>https://simplesolution.dev/java-capitalize-first-letter-of-each-word-of-string/</link>
      <pubDate>Mon, 05 Oct 2020 22:03:37 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-capitalize-first-letter-of-each-word-of-string/</guid>
      <description>Introduction In this article we show how to use WordUtils utility class of Apache Commons Text library to capitalize the first character of each word in a Java String. We will provide Java code examples to show how to use capitalize() and capitalizeFully() methods of the libraryâ€™s WordUtils utility class.
   (adsbygoogle = window.adsbygoogle || []).push({});  Setup Apache Commons Text in Java project If you are using Gradle build then add the following dependency configuration into build.</description>
    </item>
    
    <item>
      <title>Capitalize First Letter of a String in Java using Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-capitalize-first-letter-of-string/</link>
      <pubDate>Mon, 05 Oct 2020 21:09:18 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-capitalize-first-letter-of-string/</guid>
      <description>Introduction In this article we show how to use StringUtils of Apache Commons Lang library to capitalize the first character of a Java String by using StringUtils.capitalize() utility method.
   (adsbygoogle = window.adsbygoogle || []).push({});  Setup Apache Commons Lang in Java project If you are using Gradle build then add the following dependency configuration into build.gradle file.
compile group: &amp;#39;org.apache.commons&amp;#39;, name: &amp;#39;commons-lang3&amp;#39;, version: &amp;#39;3.11&amp;#39; Or add the following dependency XML tag to pom.</description>
    </item>
    
    <item>
      <title>Abbreviates a String using ellipses in Java using Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-abbreviates-string-using-ellipses/</link>
      <pubDate>Sun, 04 Oct 2020 23:50:42 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-abbreviates-string-using-ellipses/</guid>
      <description>Introduction In this post we show how to use Apache Commons Lang library to abbreviate a String using ellipses. We provide multiple Java code examples on how to use StringUtils.abbreviate() utility method to achieve our goal.
   (adsbygoogle = window.adsbygoogle || []).push({});  Setup Apache Commons Lang in Java project If you are using Gradle build then add the following dependency configuration into build.gradle file.
compile group: &amp;#39;org.</description>
    </item>
    
    <item>
      <title>Check if a String is a valid numeric value in Java using Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-check-if-string-is-valid-numeric-value/</link>
      <pubDate>Sun, 04 Oct 2020 23:07:43 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-check-if-string-is-valid-numeric-value/</guid>
      <description>Introduction In this article we show you how to use different utility classes in Apache Commons Lang library to check if a String is a valid number in Java. We provide different working code examples how to use methods such as NumberUtils.isCreatable(), NumberUtils.isDigits() or StringUtils.isNumeric().
   (adsbygoogle = window.adsbygoogle || []).push({});  Setup Apache Commons Lang in Java project If you are using Gradle build then add the following dependency configuration into build.</description>
    </item>
    
    <item>
      <title>Check if a String contains another String in Java</title>
      <link>https://simplesolution.dev/java-check-if-a-string-contains-a-substring/</link>
      <pubDate>Sun, 04 Oct 2020 15:57:35 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-check-if-a-string-contains-a-substring/</guid>
      <description>Core Java classes provide different solutions that developers can use to check if a String contains another String inside it. In this article we will show you different Java code examples how to check if a String is inside another String using core Java methods such as String.contains(), String.indexOf(), String.lastIndexOf(), String.matches() and java.util.regex.Pattern class.
   (adsbygoogle = window.adsbygoogle || []).push({});  Java code how to use String.contains() In this code example we use String.</description>
    </item>
    
    <item>
      <title>Replace or Remove All Digits of a String in Java using regular expression</title>
      <link>https://simplesolution.dev/java-replace-or-remove-all-digits-of-a-string-in-using-regular-expression/</link>
      <pubDate>Sun, 04 Oct 2020 13:47:34 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-replace-or-remove-all-digits-of-a-string-in-using-regular-expression/</guid>
      <description>In this article we are going to learn how to use core Java classes to remove all numeric characters from a String or replace numeric characters with other characters. We will show you different Java code examples how to use String.replaceAll() method and java.util.regex.Pattern class.
   (adsbygoogle = window.adsbygoogle || []).push({});  Java code example using regex &amp;ldquo;[0-9]&amp;rdquo; with String.replaceAll() method
public class RemoveReplaceDigitsExample1 { public static void main(String[] args) { String testString = &amp;#34;Your OTP (one time password) is 112233&amp;#34;; // Remove all numeric characters  String removedDigitsString = testString.</description>
    </item>
    
    <item>
      <title>Extract Digits from a String in Java using regular expression</title>
      <link>https://simplesolution.dev/java-extract-digits-from-a-string-using-regular-expression/</link>
      <pubDate>Sat, 03 Oct 2020 22:17:59 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-extract-digits-from-a-string-using-regular-expression/</guid>
      <description>In this post we show you how to use regular expressions to remove all non-digits characters of a String and return the number only String in Java application.
   (adsbygoogle = window.adsbygoogle || []).push({});  Following Java example code use String.replaceAll() method with regex &amp;ldquo;[^0-9]&amp;rdquo; to replace non-digits characters in a String with empty String.
public class ExtractDigitsFromStringExample1 { public static void main(String[] args) { String testString = &amp;#34;Java was released in 1995&amp;#34;; String numberOnlyString = testString.</description>
    </item>
    
    <item>
      <title>Java Find Difference between two Strings using StringUtils Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-find-difference-between-two-strings-using-stringutils-apache-commons-lang/</link>
      <pubDate>Fri, 02 Oct 2020 22:57:11 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-find-difference-between-two-strings-using-stringutils-apache-commons-lang/</guid>
      <description>Introduction In this post we will show you Java example code how to find the difference between two Strings using StringUtils utility class of Apache Commons Lang library.
   (adsbygoogle = window.adsbygoogle || []).push({});  Setup Apache Commons Lang in Java project If you are using Gradle build then add the following dependency configuration into build.gradle file.
compile group: &amp;#39;org.apache.commons&amp;#39;, name: &amp;#39;commons-lang3&amp;#39;, version: &amp;#39;3.11&amp;#39; Or add the following dependency XML tag to pom.</description>
    </item>
    
    <item>
      <title>Java check String is empty or blank or contains text using StringUtils Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-check-string-is-empty-blank-contains-text-stringutils-apache-commons-lang/</link>
      <pubDate>Fri, 02 Oct 2020 00:32:50 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-check-string-is-empty-blank-contains-text-stringutils-apache-commons-lang/</guid>
      <description>Introduction In this post we are going to learn how to use StringUtils utility class of Apache Commons Lang library in Java application to check if a string contains text, an empty string or a blank string.
   (adsbygoogle = window.adsbygoogle || []).push({});  Setup Apache Commons Lang in Java project If you are using Gradle build then add the following dependency configuration into build.gradle file.
compile group: &amp;#39;org.</description>
    </item>
    
    <item>
      <title>Spring Boot SFTP File Transfer using JSch Java Library</title>
      <link>https://simplesolution.dev/spring-boot-sftp-file-transfer-using-jsch-java-library/</link>
      <pubDate>Mon, 28 Sep 2020 22:37:34 +0700</pubDate>
      
      <guid>https://simplesolution.dev/spring-boot-sftp-file-transfer-using-jsch-java-library/</guid>
      <description>Overview In this post we will show you how to transfer files from a local host to a remote server and download files from a remote server to local host via SFTP in Spring Boot applications. In order to transfer files via SFTP in Java applications we also explore the JSch library.
   (adsbygoogle = window.adsbygoogle || []).push({});  Creating Spring Boot Project with Spring Tool Suite on Eclipse From Spring Tool Suite IDE select menu File -&amp;gt; New -&amp;gt; Spring Starter Project.</description>
    </item>
    
    <item>
      <title>Spring Boot Web Application Upload File</title>
      <link>https://simplesolution.dev/spring-boot-web-application-upload-file/</link>
      <pubDate>Fri, 28 Feb 2020 00:37:35 +0700</pubDate>
      
      <guid>https://simplesolution.dev/spring-boot-web-application-upload-file/</guid>
      <description>In this tutorial weâ€™re going to learn how to implement file uploading function in a Spring Boot web application.
   (adsbygoogle = window.adsbygoogle || []).push({});  Creating Spring Boot Project with Spring Tool Suite on Eclipse Open Spring Tool Suite and go to menu File -&amp;gt; New -&amp;gt; Spring Starter Project.
On the New Spring Starter Project window, input your project information as below screenshot and click Next button.</description>
    </item>
    
    <item>
      <title>Generate Thumbnail Images in Java with Thumbnailator library</title>
      <link>https://simplesolution.dev/generate-thumbnail-images-in-java-with-thumbnailator-library/</link>
      <pubDate>Thu, 27 Feb 2020 00:52:08 +0700</pubDate>
      
      <guid>https://simplesolution.dev/generate-thumbnail-images-in-java-with-thumbnailator-library/</guid>
      <description>As a daily job of a web developer you usually have the scenario that you need to generate the thumbnail image from a large original image. This take can easily be done by the Thumbnailator library, an easy to use thumbnail generation library for Java. In this Java tutorial we are going to learn how to use the Thumbnailator library.
   (adsbygoogle = window.adsbygoogle || []).push({});  Thumbnailator home page: github.</description>
    </item>
    
    <item>
      <title>Top 3 Libraries for Writing and Reading CSV File in Java</title>
      <link>https://simplesolution.dev/top-3-libraries-for-writing-and-reading-csv-file-in-java/</link>
      <pubDate>Wed, 26 Feb 2020 01:15:38 +0700</pubDate>
      
      <guid>https://simplesolution.dev/top-3-libraries-for-writing-and-reading-csv-file-in-java/</guid>
      <description>Introduction In this tutorial weâ€™re going to learn how to use open source Java libraries to quickly write and read Comma Separated Values or CSV file format. We will explore 3 useful libraries and implement Java programs to write and read CSV files using each library.
   (adsbygoogle = window.adsbygoogle || []).push({});  Apache Commons CSV Home page: commons.apache.org/proper/commons-csv/
Project Dependencies:
Adding below dependencies to build.gradle file if you are using Gradle build tool.</description>
    </item>
    
    <item>
      <title>Apache POI Hide and Unhide Excel Row using Row.setZeroHeight()</title>
      <link>https://simplesolution.dev/apache-poi-hide-and-unhide-excel-row-using-row.setzeroheight/</link>
      <pubDate>Thu, 09 Jan 2020 07:56:46 +0700</pubDate>
      
      <guid>https://simplesolution.dev/apache-poi-hide-and-unhide-excel-row-using-row.setzeroheight/</guid>
      <description>Introduction In Excel there is an option to hide / unhide a row by select the row then righ click on it and choose Hide / Unhide option. In this tutorial we will learn how to use Apache POI library in Java to create an Excel file and hide its row. Then we try to unhide it by another Java application example.
   (adsbygoogle = window.adsbygoogle || []).</description>
    </item>
    
    <item>
      <title>Apache POI Creating Multiple Fonts Excel Cell using RichTextString</title>
      <link>https://simplesolution.dev/apache-poi-creating-multiple-fonts-excel-cell-using-richtextstring/</link>
      <pubDate>Tue, 07 Jan 2020 00:42:52 +0700</pubDate>
      
      <guid>https://simplesolution.dev/apache-poi-creating-multiple-fonts-excel-cell-using-richtextstring/</guid>
      <description>Introduction In this tutorial we will learn how to create an Excel cell with multiple font styles using Apache POI library.
We will implement different examples to create .xls and xlsx Excel file format using HSSFRichTextString and XSSFRichTextString class in Apache POI.
   (adsbygoogle = window.adsbygoogle || []).push({});  Apache POI Overview Apache POI is a open source library to work with Microsoft Office documents in Java.</description>
    </item>
    
    <item>
      <title>Creating PDF Document Page Labels in Java with Apache PDFBox</title>
      <link>https://simplesolution.dev/creating-pdf-document-page-labels-in-java-with-apache-pdfbox/</link>
      <pubDate>Thu, 02 Jan 2020 21:58:44 +0700</pubDate>
      
      <guid>https://simplesolution.dev/creating-pdf-document-page-labels-in-java-with-apache-pdfbox/</guid>
      <description>Introduction In PDF document format the page label to identify each document page visually for example showing text label on thumbnail panel on PDF reader application. In this Java tutorial we will learn how to create page labels for PDF document by Java application using Apache PDFBox library.
   (adsbygoogle = window.adsbygoogle || []).push({});  Apache PDFBox Library Overview The Apache PDFBox is an open source Java library for working with PDF documents.</description>
    </item>
    
    <item>
      <title>Creating Bookmarks for PDF Document in Java with Apache PDFBox</title>
      <link>https://simplesolution.dev/creating-bookmarks-for-pdf-document-in-java-with-apache-pdfbox/</link>
      <pubDate>Wed, 01 Jan 2020 21:37:14 +0700</pubDate>
      
      <guid>https://simplesolution.dev/creating-bookmarks-for-pdf-document-in-java-with-apache-pdfbox/</guid>
      <description>Introduction In this tutorial we will learn how to add bookmark items to a PDF document in Java using Apache PDFBox library. The post also show how to add bookmarks for new PDF document and existing PDF file.
   (adsbygoogle = window.adsbygoogle || []).push({});  Apache PDFBox Library Overview The Apache PDFBox is an open source Java library for working with PDF documents. You can get more information about the project at pdfbox.</description>
    </item>
    
    <item>
      <title>Apache PDFBox Adding Metadata to PDF Document in Java</title>
      <link>https://simplesolution.dev/apache-pdfbox-adding-metadata-to-pdf-document-in-java/</link>
      <pubDate>Wed, 01 Jan 2020 15:34:11 +0700</pubDate>
      
      <guid>https://simplesolution.dev/apache-pdfbox-adding-metadata-to-pdf-document-in-java/</guid>
      <description>Introduction This toturial will show you how to adding metadata information such as title, creation date, modification date, author, creator tool, producer keywords etc. and custom properties to a new PDF document or the existing PDF file in Java using Apache PDFBox library.
   (adsbygoogle = window.adsbygoogle || []).push({});  Apache PDFBox Overview The Apache PDFBox is an open source library for working with PDF documents in Java.</description>
    </item>
    
    <item>
      <title>Insert Image to PDF Document in Java using Apache PDFBox</title>
      <link>https://simplesolution.dev/insert-image-to-pdf-document-in-java-using-apache-pdfbox/</link>
      <pubDate>Mon, 30 Dec 2019 01:19:11 +0700</pubDate>
      
      <guid>https://simplesolution.dev/insert-image-to-pdf-document-in-java-using-apache-pdfbox/</guid>
      <description>Introduction In this tutorial we will learn how to create a PDF document using Apache PDFBox libary in Java and then insert an image to a PDF document page.
   (adsbygoogle = window.adsbygoogle || []).push({});  Apache PDFBox Overview The Apache PDFBox is an open source library for working with PDF documents in Java. You can get more information about the project at pdfbox.apache.org
Adding Apache PDFBox Dependencies Adding below dependencies to build.</description>
    </item>
    
    <item>
      <title>Creating PDF Document File in Java using Apache PDFBox</title>
      <link>https://simplesolution.dev/creating-pdf-document-file-in-java-using-apache-pdfbox/</link>
      <pubDate>Sun, 29 Dec 2019 10:26:47 +0700</pubDate>
      
      <guid>https://simplesolution.dev/creating-pdf-document-file-in-java-using-apache-pdfbox/</guid>
      <description>Introduction In this tutorial we will learn how to create a PDF document file in Java application using Apache PDFBox library.
Apache PDFBox Overview The Apache PDFBox is an open source library for working with PDF documents in Java. You can get more information about the project at pdfbox.apache.org
   (adsbygoogle = window.adsbygoogle || []).push({});  Adding Apache PDFBox Dependencies Adding below dependencies to build.gradle file if you are using Gradle build tool.</description>
    </item>
    
  </channel>
</rss>