<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>String on Simple Solution</title>
    <link>https://simplesolution.dev/tag/string/</link>
    <description>Recent content in String on Simple Solution</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 20 Jun 2021 16:23:01 +0700</lastBuildDate>
    
	<atom:link href="https://simplesolution.dev/tag/string/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java Convert between Case Format of String using Google Guava</title>
      <link>https://simplesolution.dev/java-convert-between-case-format-of-string-using-google-guava/</link>
      <pubDate>Sun, 20 Jun 2021 16:23:01 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-convert-between-case-format-of-string-using-google-guava/</guid>
      <description>In this Java tutorial we learn how to use the com.google.common.base.CaseFormat class of Google Guava library to convert between various case formats of strings.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Google Guava library to the Java project To use the Google Guava library in the Gradle build project, add the following dependency into the build.gradle file.
implementation group: &amp;#39;com.google.guava&amp;#39;, name: &amp;#39;guava&amp;#39;, version: &amp;#39;30.1.1-jre&amp;#39; To use the Google Guava library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Java Truncate ASCII String using Google Guava</title>
      <link>https://simplesolution.dev/java-truncate-ascii-string-using-google-guava/</link>
      <pubDate>Sat, 19 Jun 2021 16:46:01 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-truncate-ascii-string-using-google-guava/</guid>
      <description>In this Java tutorial we learn how to use the com.google.common.base.Ascii class of Google Guava library to truncate an ASCII String with a given max length and truncation indicator.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Google Guava library to the Java project To use the Google Guava library in the Gradle build project, add the following dependency into the build.gradle file.
implementation group: &amp;#39;com.</description>
    </item>
    
    <item>
      <title>Java Check two ASCII Strings Equals Ignore Case using Google Guava</title>
      <link>https://simplesolution.dev/java-check-two-strings-equals-ignore-case-using-google-guava/</link>
      <pubDate>Sat, 19 Jun 2021 15:54:23 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-check-two-strings-equals-ignore-case-using-google-guava/</guid>
      <description>In this Java tutorial we learn how to use the com.google.common.base.Ascii class of Google Guava to indicate whether the contents of two String are equal, ignoring lowercase or uppercase.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Google Guava library to the Java project To use the Google Guava library in the Gradle build project, add the following dependency into the build.gradle file.
implementation group: &amp;#39;com.</description>
    </item>
    
    <item>
      <title>Java Convert ASCII String to UPPERCASE using Google Guava</title>
      <link>https://simplesolution.dev/java-convert-ascii-string-to-uppercase-using-google-guava/</link>
      <pubDate>Sat, 19 Jun 2021 14:36:33 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-convert-ascii-string-to-uppercase-using-google-guava/</guid>
      <description>In this Java tutorial we learn how to use the com.google.common.base.Ascii class of Google Guava library to convert ASCII String or character to uppercase String.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Google Guava library to the Java project To use the Google Guava library in the Gradle build project, add the following dependency into the build.gradle file.
implementation group: &amp;#39;com.google.guava&amp;#39;, name: &amp;#39;guava&amp;#39;, version: &amp;#39;30.</description>
    </item>
    
    <item>
      <title>Java Convert ASCII String to lowercase using Google Guava</title>
      <link>https://simplesolution.dev/java-convert-ascii-string-to-lowercase-using-google-guava/</link>
      <pubDate>Sat, 19 Jun 2021 14:13:50 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-convert-ascii-string-to-lowercase-using-google-guava/</guid>
      <description>In this Java tutorial we learn how to use the com.google.common.base.Ascii class of Google Guava library to convert ASCII String or character to lowercase.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Google Guava library to the Java project To use the Google Guava library in the Gradle build project, add the following dependency into the build.gradle file.
implementation group: &amp;#39;com.google.guava&amp;#39;, name: &amp;#39;guava&amp;#39;, version: &amp;#39;30.1.1-jre&amp;#39; To use the Google Guava library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Java Convert String to Character using Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-convert-string-to-character-using-apache-commons-lang/</link>
      <pubDate>Tue, 01 Jun 2021 21:43:10 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-convert-string-to-character-using-apache-commons-lang/</guid>
      <description>In this Java tutorial we learn how to convert a String object to a Character object using the CharUtils class of Apache Commons Lang library.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Apache Commons Lang 3 library to your Java project To use the Apache Commons Lang 3 library in the Gradle build project, add the following dependency into the build.gradle file.
implementation &amp;#39;org.apache.commons:commons-lang3:3.12.0&amp;#39; To use the Apache Commons Lang 3 library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Java Convert String to char using Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-convert-string-to-char-using-apache-commons-lang/</link>
      <pubDate>Tue, 01 Jun 2021 21:41:03 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-convert-string-to-char-using-apache-commons-lang/</guid>
      <description>In this Java tutorial we learn how to convert a String object into a char value using the CharUtils class of Apache Commons Lang library.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Apache Commons Lang 3 library to your Java project To use the Apache Commons Lang 3 library in the Gradle build project, add the following dependency into the build.gradle file.
implementation &amp;#39;org.apache.commons:commons-lang3:3.12.0&amp;#39; To use the Apache Commons Lang 3 library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Java Convert char to String using Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-convert-char-to-string-using-apache-commons-lang/</link>
      <pubDate>Tue, 01 Jun 2021 21:38:45 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-convert-char-to-string-using-apache-commons-lang/</guid>
      <description>In this Java tutorial we learn how to Convert a char value to a String object using the CharUtils of Apache Commons Lang library.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Apache Commons Lang 3 library to your Java project To use the Apache Commons Lang 3 library in the Gradle build project, add the following dependency into the build.gradle file.
implementation &amp;#39;org.apache.commons:commons-lang3:3.12.0&amp;#39; To use the Apache Commons Lang 3 library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Java Convert Character to String using Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-convert-character-to-string-using-apache-commons-lang/</link>
      <pubDate>Tue, 01 Jun 2021 21:34:05 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-convert-character-to-string-using-apache-commons-lang/</guid>
      <description>In this Java tutorial we learn how to Convert a Character object to a String object using the CharUtils of Apache Commons Lang library.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Apache Commons Lang 3 library to your Java project To use the Apache Commons Lang 3 library in the Gradle build project, add the following dependency into the build.gradle file.
implementation &amp;#39;org.apache.commons:commons-lang3:3.12.0&amp;#39; To use the Apache Commons Lang 3 library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Java Convert Class Loader to String using Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-convert-class-loader-to-string-using-apache-commons-lang/</link>
      <pubDate>Tue, 01 Jun 2021 21:22:25 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-convert-class-loader-to-string-using-apache-commons-lang/</guid>
      <description>In this Java tutorial we learn how to convert a ClassLoader or a URLClassLoader to String which presents detailed information of a class loader using the ClassLoaderUtils class of Apache Commons Lang library.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Apache Commons Lang 3 library to your Java project To use the Apache Commons Lang 3 library in the Gradle build project, add the following dependency into the build.</description>
    </item>
    
    <item>
      <title>Java Squeeze Repetition Characters in a String using Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-squeeze-repetition-characters-in-string-using-apache-commons-lang/</link>
      <pubDate>Mon, 31 May 2021 01:17:00 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-squeeze-repetition-characters-in-string-using-apache-commons-lang/</guid>
      <description>In this Java tutorial we learn how to squeeze any repetition characters in a given String using the CharSetUtils class of Apache Commons Lang library.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Apache Commons Lang 3 library to your Java project To use the Apache Commons Lang 3 library in the Gradle build project, add the following dependency into the build.gradle file.
implementation &amp;#39;org.apache.commons:commons-lang3:3.12.0&amp;#39; To use the Apache Commons Lang 3 library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Java Keep Only Characters Present in a String using Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-keep-only-characters-present-in-string-using-apache-commons-lang/</link>
      <pubDate>Mon, 31 May 2021 01:14:51 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-keep-only-characters-present-in-string-using-apache-commons-lang/</guid>
      <description>In this Java tutorial we learn how to populate a String which keeps only given characters present in the String using the CharSetUtils class of Apache Commons Lang library.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Apache Commons Lang 3 library to your Java project To use the Apache Commons Lang 3 library in the Gradle build project, add the following dependency into the build.</description>
    </item>
    
    <item>
      <title>Java Delete Characters in a String using Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-delete-characters-in-string-using-apache-commons-lang/</link>
      <pubDate>Mon, 31 May 2021 01:13:01 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-delete-characters-in-string-using-apache-commons-lang/</guid>
      <description>In this Java tutorial we learn how to delete any of the characters present in a given String using CharSetUtils class of Apache Commons Lang library.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Apache Commons Lang 3 library to your Java project To use the Apache Commons Lang 3 library in the Gradle build project, add the following dependency into the build.gradle file.
implementation &amp;#39;org.</description>
    </item>
    
    <item>
      <title>Java Count Characters present in a String using Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-count-characters-present-in-string-using-apache-commons-lang/</link>
      <pubDate>Mon, 31 May 2021 01:10:35 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-count-characters-present-in-string-using-apache-commons-lang/</guid>
      <description>In this Java tutorial we learn how to count the number of characters present in a given String using the CharSetUtils class of Apache Commons Lang library.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Apache Commons Lang 3 library to your Java project To use the Apache Commons Lang 3 library in the Gradle build project, add the following dependency into the build.gradle file.</description>
    </item>
    
    <item>
      <title>Java Check a String Contains Any Characters using Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-check-string-contains-any-characters-using-apache-commons-lang/</link>
      <pubDate>Mon, 31 May 2021 01:08:09 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-check-string-contains-any-characters-using-apache-commons-lang/</guid>
      <description>In this Java tutorial we learn how to check a String to identify whether it contains any of given characters using CharSetUtils class of Apache Commons Lang library.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Apache Commons Lang 3 library to your Java project To use the Apache Commons Lang 3 library in the Gradle build project, add the following dependency into the build.gradle file.</description>
    </item>
    
    <item>
      <title>Java Convert Array of Objects to Array of Strings using Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-convert-array-of-objects-to-array-of-strings-using-apache-commons-lang/</link>
      <pubDate>Sat, 29 May 2021 23:07:33 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-convert-array-of-objects-to-array-of-strings-using-apache-commons-lang/</guid>
      <description>In this Java tutorial we learn how to convert an array of object values into an array of String values using the ArrayUtils class of Apache Commons Lang library.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Apache Commons Lang 3 library to your Java project To use the Apache Commons Lang 3 library in the Gradle build project, add the following dependency into the build.</description>
    </item>
    
    <item>
      <title>Java Convert String to Locale using Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-convert-string-to-locale-using-apache-commons-lang/</link>
      <pubDate>Sat, 29 May 2021 00:45:42 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-convert-string-to-locale-using-apache-commons-lang/</guid>
      <description>In this Java tutorial we show you how to convert a String value into a Locale object using the LocaleUtils class of Apache Commons Lang library.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Apache Commons Lang 3 library to your Java project To use the Apache Commons Lang 3 library in the Gradle build project, add the following dependency into the build.gradle file.
implementation &amp;#39;org.</description>
    </item>
    
    <item>
      <title>Read Content from URL into String in Java using Apache Commons IO</title>
      <link>https://simplesolution.dev/java-read-content-from-url-into-string-using-apache-commons-io/</link>
      <pubDate>Mon, 24 May 2021 23:05:44 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-read-content-from-url-into-string-using-apache-commons-io/</guid>
      <description>In this Java tutorial, we learn how to get the content of an URL into a String object using IOUtils utility class of Apache Commons IO library.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Apache Commons IO library to your Java project To use the Apache Commons IO library in the Gradle build project, add the following dependency into the build.gradle file.
implementation &amp;#39;commons-io:commons-io:2.8.0&amp;#39; To use the Apache Commons IO library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Read Content from URI into String in Java using Apache Commons IO</title>
      <link>https://simplesolution.dev/java-read-content-from-uri-into-string-using-apache-commons-io/</link>
      <pubDate>Mon, 24 May 2021 23:02:45 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-read-content-from-uri-into-string-using-apache-commons-io/</guid>
      <description>In this Java tutorial, we learn how to get the content of an URI into a String object using IOUtils utility class of Apache Commons IO library.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Apache Commons IO library to your Java project To use the Apache Commons IO library in the Gradle build project, add the following dependency into the build.gradle file.
implementation &amp;#39;commons-io:commons-io:2.8.0&amp;#39; To use the Apache Commons IO library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Convert String to InputStream in Java using Apache Commons IO</title>
      <link>https://simplesolution.dev/java-convert-string-to-inputstream-using-apache-commons-io/</link>
      <pubDate>Mon, 24 May 2021 22:52:07 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-convert-string-to-inputstream-using-apache-commons-io/</guid>
      <description>In this Java tutorial, we learn how to use the IOUtils utility class in Apache Commons IO library to convert a String object to an InputStream object.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Apache Commons IO library to your Java project To use the Apache Commons IO library in the Gradle build project, add the following dependency into the build.gradle file.
implementation &amp;#39;commons-io:commons-io:2.8.0&amp;#39; To use the Apache Commons IO library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Convert Reader to String in Java using Apache Commons IO</title>
      <link>https://simplesolution.dev/java-convert-reader-to-string-using-apache-commons-io/</link>
      <pubDate>Mon, 24 May 2021 22:41:43 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-convert-reader-to-string-using-apache-commons-io/</guid>
      <description>In this Java tutorial, we learn how to read the Reader object as a String using IOUtils utility class of Apache Commons IO library.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Apache Commons IO library to your Java project To use the Apache Commons IO library in the Gradle build project, add the following dependency into the build.gradle file.
implementation &amp;#39;commons-io:commons-io:2.8.0&amp;#39; To use the Apache Commons IO library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Convert InputStream to String in Java using Apache Commons IO</title>
      <link>https://simplesolution.dev/java-convert-inputstream-to-string-using-apache-commons-io/</link>
      <pubDate>Mon, 24 May 2021 22:34:53 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-convert-inputstream-to-string-using-apache-commons-io/</guid>
      <description>In this Java tutorial, we learn how to read the InputStream object as a String using IOUtils utility class of Apache Commons IO library.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Apache Commons IO library to your Java project To use the Apache Commons IO library in the Gradle build project, add the following dependency into the build.gradle file.
implementation &amp;#39;commons-io:commons-io:2.8.0&amp;#39; To use the Apache Commons IO library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Java Read Classpath Resource as String using Apache Commons IO</title>
      <link>https://simplesolution.dev/java-read-classpath-resource-as-string-using-apache-commons-io/</link>
      <pubDate>Sun, 23 May 2021 22:54:13 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-read-classpath-resource-as-string-using-apache-commons-io/</guid>
      <description>In this Java tutorial, we learn how to read a classpath resource into a String using the IOUtils class of Apache Commons IO library.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Apache Commons IO library to your Java project To use the Apache Commons IO library in the Gradle build project, add the following dependency into the build.gradle file.
implementation &amp;#39;commons-io:commons-io:2.8.0&amp;#39; To use the Apache Commons IO library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Java Read List of Strings of Reader using Apache Commons IO</title>
      <link>https://simplesolution.dev/java-read-list-of-strings-reader-using-apache-commons-io/</link>
      <pubDate>Sun, 23 May 2021 22:44:44 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-read-list-of-strings-reader-using-apache-commons-io/</guid>
      <description>In this Java tutorial, we learn how to read a list of Strings of a Reader object by using IOUtils utility class of Apache Commons IO library.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Apache Commons IO library to your Java project To use the Apache Commons IO library in the Gradle build project, add the following dependency into the build.gradle file.
implementation &amp;#39;commons-io:commons-io:2.8.0&amp;#39; To use the Apache Commons IO library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Java Read List of Strings of InputStream using Apache Commons IO</title>
      <link>https://simplesolution.dev/java-read-list-of-strings-inputstream-using-apache-commons-io/</link>
      <pubDate>Sun, 23 May 2021 22:41:36 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-read-list-of-strings-inputstream-using-apache-commons-io/</guid>
      <description>In this Java tutorial, we learn how to read a list of Strings of an InputStream object by using IOUtils utility class of Apache Commons IO library.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Apache Commons IO library to your Java project To use the Apache Commons IO library in the Gradle build project, add the following dependency into the build.gradle file.
implementation &amp;#39;commons-io:commons-io:2.8.0&amp;#39; To use the Apache Commons IO library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Encode and Decode String to Binary Format in Java using Apache Commons Codec</title>
      <link>https://simplesolution.dev/java-encode-decode-binary-string-using-apache-commons-codec/</link>
      <pubDate>Wed, 24 Mar 2021 23:47:03 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-encode-decode-binary-string-using-apache-commons-codec/</guid>
      <description>In this Java tutorial, we learn how to use the BinaryCodec class of Apache Commons Codec library to convert a String into a String of ‘0’ and ‘1’ and decode it in Java programs.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Apache Commons Codec library to your Java project To use the Apache Commons Codec library in the Gradle build project, add the following dependency into the build.</description>
    </item>
    
    <item>
      <title>Base32 Encoding and Decoding in Java using Apache Commons Codec</title>
      <link>https://simplesolution.dev/java-base32-encoding-decoding-using-apache-commons-codec/</link>
      <pubDate>Wed, 24 Mar 2021 22:47:06 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-base32-encoding-decoding-using-apache-commons-codec/</guid>
      <description>In this Java tutorial, We learn how to use the Base32 class of Apache Commons Codec library to do Base32 encoding and decoding in Java programs.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Apache Commons Codec library to your Java project To use the Apache Commons Codec library in the Gradle build project, add the following dependency into the build.gradle file.
implementation &amp;#39;commons-codec:commons-codec:1.15&amp;#39; To use the Apache Commons Codec library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Convert float to String in Java</title>
      <link>https://simplesolution.dev/java-convert-float-to-string/</link>
      <pubDate>Mon, 01 Feb 2021 00:08:17 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-convert-float-to-string/</guid>
      <description>In this Java core tutorial, we learn how to convert float value into String value in Java via different solutions.
   (adsbygoogle = window.adsbygoogle || []).push({});  Using String.valueOf() method to convert float value to String ConvertFloatToStringExample1.java public class ConvertFloatToStringExample1 { public static void main(String[] args) { float value1 = 12.0203F; String value2 = String.valueOf(value1); System.out.println(&amp;#34;float value: &amp;#34; + value1); System.out.println(&amp;#34;String value: &amp;#34; + value2); } } The output is: float value: 12.</description>
    </item>
    
    <item>
      <title>Convert String to float in Java</title>
      <link>https://simplesolution.dev/java-convert-string-to-float/</link>
      <pubDate>Mon, 01 Feb 2021 00:01:40 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-convert-string-to-float/</guid>
      <description>In this Java core tutorial, we learn how to convert String value into float value in Java via different solutions.
   (adsbygoogle = window.adsbygoogle || []).push({});  Parse a String to float using Float.parseFloat() method ConvertStringToFloatExample1.java public class ConvertStringToFloatExample1 { public static void main(String[] args) { String value1 = &amp;#34;12.090807&amp;#34;; float value2 = Float.parseFloat(value1); System.out.println(&amp;#34;String value: &amp;#34; + value1); System.out.println(&amp;#34;float value: &amp;#34; + value2); } } The output is: String value: 12.</description>
    </item>
    
    <item>
      <title>Convert String to double in Java</title>
      <link>https://simplesolution.dev/java-convert-string-to-double/</link>
      <pubDate>Sun, 31 Jan 2021 23:53:41 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-convert-string-to-double/</guid>
      <description>In this Java core tutorial, we learn how to convert String value into double value in Java via different solutions.
   (adsbygoogle = window.adsbygoogle || []).push({});  Parse String to double using Double.parseDouble() method ConvertStringToDoubleExample1.java public class ConvertStringToDoubleExample1 { public static void main(String[] args) { String value1 = &amp;#34;12.343536&amp;#34;; double value2 = Double.parseDouble(value1); System.out.println(&amp;#34;String value: &amp;#34; + value1); System.out.println(&amp;#34;double value: &amp;#34; + value2); } } The output is: String value: 12.</description>
    </item>
    
    <item>
      <title>Convert double to String in Java</title>
      <link>https://simplesolution.dev/java-convert-double-to-string/</link>
      <pubDate>Sun, 31 Jan 2021 23:45:29 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-convert-double-to-string/</guid>
      <description>In this Java core tutorial, we learn how to convert double value into String value in Java via different solutions.
   (adsbygoogle = window.adsbygoogle || []).push({});  Using String.valueOf() method to convert a double value to String ConvertDoubleToStringExample1.java public class ConvertDoubleToStringExample1 { public static void main(String[] args) { double value1 = 12.0099; String value2 = String.valueOf(value1); System.out.println(&amp;#34;double value: &amp;#34; + value1); System.out.println(&amp;#34;String value: &amp;#34; + value2); } } The output is: double value: 12.</description>
    </item>
    
    <item>
      <title>Convert long to String in Java</title>
      <link>https://simplesolution.dev/java-convert-long-to-string/</link>
      <pubDate>Sun, 31 Jan 2021 23:14:36 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-convert-long-to-string/</guid>
      <description>In this Java core tutorial, we learn how to convert long value into String value in Java via different solutions.
   (adsbygoogle = window.adsbygoogle || []).push({});  Using String.valueOf() method to return a String from long value ConvertLongToStringExample1.java public class ConvertLongToStringExample1 { public static void main(String[] args) { long value1 = 123456789; String value2 = String.valueOf(value1); System.out.println(&amp;#34;long value: &amp;#34; + value1); System.out.println(&amp;#34;String value: &amp;#34; + value2); } } The output is: long value: 123456789 String value: 123456789</description>
    </item>
    
    <item>
      <title>Convert String to long in Java</title>
      <link>https://simplesolution.dev/java-convert-string-to-long/</link>
      <pubDate>Sun, 31 Jan 2021 23:08:40 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-convert-string-to-long/</guid>
      <description>In this Java core tutorial, we learn how to convert String value into long value in Java via different solutions.
   (adsbygoogle = window.adsbygoogle || []).push({});  Parse a String into long using Long.parseLong() static method ConvertStringToLongExample1.java public class ConvertStringToLongExample1 { public static void main(String[] args) { String value1 = &amp;#34;123456789&amp;#34;; long value2 = Long.parseLong(value1); System.out.println(&amp;#34;String value: &amp;#34; + value1); System.out.println(&amp;#34;long value: &amp;#34; + value2); } } The output is: String value: 123456789 long value: 123456789</description>
    </item>
    
    <item>
      <title>Convert short to String in Java</title>
      <link>https://simplesolution.dev/java-convert-short-to-string/</link>
      <pubDate>Sun, 31 Jan 2021 22:53:36 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-convert-short-to-string/</guid>
      <description>In this Java core tutorial, we learn how to convert short value into String value in Java via different solutions.
   (adsbygoogle = window.adsbygoogle || []).push({});  Using String.valueOf() method to create String from a short value ConvertShortToStringExample1.java public class ConvertShortToStringExample1 { public static void main(String[] args) { short value1 = 123; String value2 = String.valueOf(value1); System.out.println(&amp;#34;short value: &amp;#34; + value1); System.out.println(&amp;#34;String value: &amp;#34; + value2); } } The output is: short value: 123 String value: 123</description>
    </item>
    
    <item>
      <title>Convert String to short in Java</title>
      <link>https://simplesolution.dev/java-convert-string-to-short/</link>
      <pubDate>Sun, 31 Jan 2021 22:19:12 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-convert-string-to-short/</guid>
      <description>In this Java core tutorial, we learn how to convert String value into short value in Java via different solutions.
   (adsbygoogle = window.adsbygoogle || []).push({});  Parse String to short value using Short.parseShort() method ConvertStringToShortExample1.java public class ConvertStringToShortExample1 { public static void main(String[] args) { String value1 = &amp;#34;1234&amp;#34;; short value2 = Short.parseShort(value1); System.out.println(&amp;#34;String value: &amp;#34; + value1); System.out.println(&amp;#34;short value: &amp;#34; + value2); } } The output is: String value: 1234 short value: 1234</description>
    </item>
    
    <item>
      <title>Convert byte to String in Java</title>
      <link>https://simplesolution.dev/java-convert-byte-to-string/</link>
      <pubDate>Sun, 31 Jan 2021 21:26:40 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-convert-byte-to-string/</guid>
      <description>In this Java core tutorial, we learn how to convert byte value into String value in Java via different solutions.
   (adsbygoogle = window.adsbygoogle || []).push({});  Using String.valueOf() method to instantiate String from a byte value ConvertByteToStringExample1.java public class ConvertByteToStringExample1 { public static void main(String[] args) { byte value1 = 12; String value2 = String.valueOf(value1); System.out.println(&amp;#34;byte value: &amp;#34; + value1); System.out.println(&amp;#34;String value: &amp;#34; + value2); } } The output is: byte value: 12 String value: 12</description>
    </item>
    
    <item>
      <title>Convert String to byte in Java</title>
      <link>https://simplesolution.dev/java-convert-string-to-byte/</link>
      <pubDate>Sun, 31 Jan 2021 21:15:42 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-convert-string-to-byte/</guid>
      <description>In this Java core tutorial, we learn how to convert String value into byte value in Java via different solutions.
   (adsbygoogle = window.adsbygoogle || []).push({});  Using Byte.parseByte() static method to parse String into byte value in Java ConvertStringToByteExample1.java public class ConvertStringToByteExample1 { public static void main(String[] args) { String value1 = &amp;#34;22&amp;#34;; int value2 = Byte.parseByte(value1); System.out.println(&amp;#34;String value: &amp;#34; + value1); System.out.println(&amp;#34;byte value: &amp;#34; + value2); } } The output is: String value: 22 byte value: 22</description>
    </item>
    
    <item>
      <title>Convert String to int in Java</title>
      <link>https://simplesolution.dev/java-convert-string-to-int/</link>
      <pubDate>Sun, 31 Jan 2021 21:08:17 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-convert-string-to-int/</guid>
      <description>In this Java core tutorial, we learn how to convert String value into int value in Java via different solutions.
   (adsbygoogle = window.adsbygoogle || []).push({});  Parse a String to int value using Integer.parseInt() static method in Java ConvertStringToIntExample1.java public class ConvertStringToIntExample1 { public static void main(String[] args) { String value1 = &amp;#34;123&amp;#34;; int value2 = Integer.parseInt(value1); System.out.println(&amp;#34;String value: &amp;#34; + value1); System.out.println(&amp;#34;int value: &amp;#34; + value2); } } The output is: String value: 123 int value: 123</description>
    </item>
    
    <item>
      <title>Convert int to String in Java</title>
      <link>https://simplesolution.dev/java-convert-int-to-string/</link>
      <pubDate>Sun, 31 Jan 2021 20:05:53 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-convert-int-to-string/</guid>
      <description>In this Java core tutorial, we learn how to convert int value into String value in Java via different solutions.
   (adsbygoogle = window.adsbygoogle || []).push({});  Using String.valueOf() method to instantiate String from a int value ConvertIntToStringExample1.java public class ConvertIntToStringExample1 { public static void main(String[] args) { int value1 = 987; String value2 = String.valueOf(value1); System.out.println(&amp;#34;int value: &amp;#34; + value1); System.out.println(&amp;#34;String value: &amp;#34; + value2); } } The output is: int value: 987 String value: 987</description>
    </item>
    
    <item>
      <title>Format Joda-Time DateTime String using ISODateTimeFormat in Java</title>
      <link>https://simplesolution.dev/java-format-joda-time-datetime-string-using-isodatetimeformat/</link>
      <pubDate>Tue, 19 Jan 2021 00:56:38 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-format-joda-time-datetime-string-using-isodatetimeformat/</guid>
      <description>In this Joda-Time tutorial, we learn how to use the ISODateTimeFormat class of Joda-Time library to format the DateTime object into a String. With different built-in formatters of ISODateTimeFormat class we can format date time String in different format.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add Joda Time library to your Java project To use Joda Time Java library in the Gradle build project, add the following dependency into the build.</description>
    </item>
    
    <item>
      <title>Convert Joda-Time DateTime into String and Vice Versa in Java</title>
      <link>https://simplesolution.dev/java-joda-time-convert-datetime-into-string-and-vice-versa/</link>
      <pubDate>Mon, 18 Jan 2021 21:30:50 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-joda-time-convert-datetime-into-string-and-vice-versa/</guid>
      <description>In this Joda-Time tutorial, we learn how to convert Joda-Time’s DateTime object into String value and vice versa parse String value into Joda-Time’s DateTime object in Java.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add Joda Time library to your Java project To use Joda Time Java library in the Gradle build project, add the following dependency into the build.gradle file.
compile group: &amp;#39;joda-time&amp;#39;, name: &amp;#39;joda-time&amp;#39;, version: &amp;#39;2.</description>
    </item>
    
    <item>
      <title>Validate String Minimum and Maximum Length in Java</title>
      <link>https://simplesolution.dev/java-validate-string-min-max-length/</link>
      <pubDate>Sat, 09 Jan 2021 12:08:15 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-validate-string-min-max-length/</guid>
      <description>In this Java core tutorial, we learn how to implement a method to validate a String with minimum and maximum length.
   (adsbygoogle = window.adsbygoogle || []).push({});  Implement utility class to validate String length First step, we implement a new class named StringUtils with a method isValidLength() to check whether a String value is valid in minimum and maximum length or not.
StringUtils.java public class StringUtils { public static boolean isValidLength(String value, int minLength, int maxLength) { if(value == null) { return false; } int length = value.</description>
    </item>
    
    <item>
      <title>Validate Email Address in Java</title>
      <link>https://simplesolution.dev/java-validate-email-address/</link>
      <pubDate>Sat, 09 Jan 2021 11:14:18 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-validate-email-address/</guid>
      <description>In this Java core tutorial, we learn how to use the regular expression in Java to check whether an email address is valid or not.
   (adsbygoogle = window.adsbygoogle || []).push({});  Implement EmailUtils class At this step we implement a new class named EmailUtils with a static method isValidEmail() to validate email address String. The method expects an email address String as augment and returns boolean value whether the email address is valid or not.</description>
    </item>
    
    <item>
      <title>Check a String Is a Valid Integer in Java</title>
      <link>https://simplesolution.dev/java-check-string-is-valid-integer/</link>
      <pubDate>Thu, 07 Jan 2021 23:23:10 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-check-string-is-valid-integer/</guid>
      <description>In this Java core tutorial, we learn how to check if a String value is a valid integer value or not in Java program.
   (adsbygoogle = window.adsbygoogle || []).push({});  Implement isValidInteger() method In the following Java code, we implement a method to check if a given String is a valid integer or not and return the result in boolean value.
The method uses Java’s Integer.parseInt() static method to try to parse the String value, in case it is the invalid integer String the Exception throws then our method returns false value.</description>
    </item>
    
    <item>
      <title>Parse String into Integer value in Java</title>
      <link>https://simplesolution.dev/java-parse-string-into-integer/</link>
      <pubDate>Thu, 07 Jan 2021 21:38:31 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-parse-string-into-integer/</guid>
      <description>In this Java core tutorial, we learn how to convert a String value into int value in Java application.
   (adsbygoogle = window.adsbygoogle || []).push({});  Using Integer.parseInt() static method Following Java example using Integer.parseInt() static method to convert a String value into int value.
ParseStringToIntExample1.java public class ParseStringToIntExample1 { public static void main(String[] args) { int result1 = Integer.parseInt(&amp;#34;1234&amp;#34;); int result2 = Integer.parseInt(&amp;#34;+5&amp;#34;); int result3 = Integer.</description>
    </item>
    
    <item>
      <title>Escape or Unescape String for CSV column data in Java using Apache Commons Text</title>
      <link>https://simplesolution.dev/java-escape-unescape-string-for-csv-column-data/</link>
      <pubDate>Thu, 08 Oct 2020 23:26:48 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-escape-unescape-string-for-csv-column-data/</guid>
      <description>Introduction In this post we are going to learn how to use StringEscapeUtils class in Apache Commons Text library to escape a String for CSV file format. If the input String value contains a comma, newline or double quote, then the output String value is returned enclosed in double quotes.
   (adsbygoogle = window.adsbygoogle || []).push({});  Setup Apache Commons Text in Java project If you are using Gradle build then add the following dependency configuration into build.</description>
    </item>
    
    <item>
      <title>Convert words in a String into camelCase in Java using Apache Commons Text</title>
      <link>https://simplesolution.dev/java-convert-words-in-a-string-into-camel-case/</link>
      <pubDate>Thu, 08 Oct 2020 22:31:54 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-convert-words-in-a-string-into-camel-case/</guid>
      <description>Introduction In this article we are going to explore Apache Commons Text library by using CaseUtils utility class to convert a String of separated words into a camelCase String.
   (adsbygoogle = window.adsbygoogle || []).push({});  Setup Apache Commons Text in Java project If you are using Gradle build then add the following dependency configuration into build.gradle file.
compile group: &amp;#39;org.apache.commons&amp;#39;, name: &amp;#39;commons-text&amp;#39;, version: &amp;#39;1.9&amp;#39; Or add the following dependency XML tag to pom.</description>
    </item>
    
    <item>
      <title>Substitute a String in Java by replace variables map to Template String using Apache Commons Text</title>
      <link>https://simplesolution.dev/java-substitute-a-string-in-java-by-replace-variables-map-to-template-string/</link>
      <pubDate>Wed, 07 Oct 2020 23:38:07 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-substitute-a-string-in-java-by-replace-variables-map-to-template-string/</guid>
      <description>Introduction In this post we are going to learn how to substitute a String in Java which replaces variables into placeholders in a template String. To do this task we will use the Apache Commons Text library with support of StringSubstitutor class. Via different Java example code we will learn how to apply StringSubstitutor in different scenarios in your Java applications.
   (adsbygoogle = window.adsbygoogle || []).push({});  Setup Apache Commons Text in Java project If you are using Gradle build then add the following dependency configuration into build.</description>
    </item>
    
    <item>
      <title>Uncapitalize first character of all words in a String in Java using Apache Commons Text</title>
      <link>https://simplesolution.dev/java-uncapitalize-first-character-of-all-words-in-a-string/</link>
      <pubDate>Wed, 07 Oct 2020 20:04:14 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-uncapitalize-first-character-of-all-words-in-a-string/</guid>
      <description>Introduction In this article we will explore the WordUtils.uncapitalize() method of Apache Commons Text library to uncapitalize a String. With Java code example we will learn how to use the WordUtils.uncapitalize() method to convert the first character of all words in a String to lowercase character.
   (adsbygoogle = window.adsbygoogle || []).push({});  Setup Apache Commons Text in Java project If you are using Gradle build then add the following dependency configuration into build.</description>
    </item>
    
    <item>
      <title>Swap Lowercase and Uppercase of a String in Java using Apache Commons Text</title>
      <link>https://simplesolution.dev/java-swap-lowercase-and-uppercase-of-a-string/</link>
      <pubDate>Tue, 06 Oct 2020 23:56:16 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-swap-lowercase-and-uppercase-of-a-string/</guid>
      <description>Introduction In this article we are going to learn how to swap the case of a String in Java application. We provide a Java code example to show how to use WordUtils.swapCase() method of Apache Commons Text library to swap the case of each character of a given String.
   (adsbygoogle = window.adsbygoogle || []).push({});  Setup Apache Commons Text in Java project If you are using Gradle build then add the following dependency configuration into build.</description>
    </item>
    
    <item>
      <title>Java extracts initial characters from each word in a String using Apache Commons Text</title>
      <link>https://simplesolution.dev/java-extracts-initial-characters-from-each-word-in-a-string/</link>
      <pubDate>Tue, 06 Oct 2020 23:20:52 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-extracts-initial-characters-from-each-word-in-a-string/</guid>
      <description>Introduction In this post we learn how to use WordUtils class of Apache Commons Text library to extract initial characters from all words of a String in Java. We will show the Java code example that uses WordUtils.initials() method to extract initial letters of people names.
   (adsbygoogle = window.adsbygoogle || []).push({});  Setup Apache Commons Text in Java project If you are using Gradle build then add the following dependency configuration into build.</description>
    </item>
    
    <item>
      <title>Java Checks if a String contains all words in array using Apache Commons Text</title>
      <link>https://simplesolution.dev/java-checks-if-a-string-contains-all-words-in-array/</link>
      <pubDate>Tue, 06 Oct 2020 22:41:54 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-checks-if-a-string-contains-all-words-in-array/</guid>
      <description>Introduction In this article we show how to check if a String contains all words in an array in Java. By using WordUtils utility class of Apache Commons Text library you can check if the String contains all words in the given array using containsAllWords() method.
   (adsbygoogle = window.adsbygoogle || []).push({});  Setup Apache Commons Text in Java project If you are using Gradle build then add the following dependency configuration into build.</description>
    </item>
    
    <item>
      <title>Wrap a line of text into multiple lines in Java using Apache Commons Text</title>
      <link>https://simplesolution.dev/java-wrap-a-line-of-text-into-multiple-lines/</link>
      <pubDate>Tue, 06 Oct 2020 20:34:43 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-wrap-a-line-of-text-into-multiple-lines/</guid>
      <description>Introduction In this post we learn how to wrap a String in Java using WordUtils utility class of Apache Commons Text library. By using WordUtils.wrap() method we can break a long line of text into multiple lines with a given input text and the length. The output String will be wrapped words and separated by system line separator character or by your custom provided separator.
   (adsbygoogle = window.</description>
    </item>
    
    <item>
      <title>Generate Random String in Java using Apache Commons Text</title>
      <link>https://simplesolution.dev/java-generate-random-string-with-random-string-generator/</link>
      <pubDate>Tue, 06 Oct 2020 00:04:09 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-generate-random-string-with-random-string-generator/</guid>
      <description>Introduction In this article we show how to generate random String values in Java using the RandomStringGenerator class of Apache Commons Text library. We provide multiple Java code examples with different settings to generate different kinds of data that may be useful for your daily programming scenarios.
   (adsbygoogle = window.adsbygoogle || []).push({});  Setup Apache Commons Text in Java project If you are using Gradle build then add the following dependency configuration into build.</description>
    </item>
    
    <item>
      <title>Capitalize First Letter of each Word of String in Java using Apache Commons Text</title>
      <link>https://simplesolution.dev/java-capitalize-first-letter-of-each-word-of-string/</link>
      <pubDate>Mon, 05 Oct 2020 22:03:37 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-capitalize-first-letter-of-each-word-of-string/</guid>
      <description>Introduction In this article we show how to use WordUtils utility class of Apache Commons Text library to capitalize the first character of each word in a Java String. We will provide Java code examples to show how to use capitalize() and capitalizeFully() methods of the library’s WordUtils utility class.
   (adsbygoogle = window.adsbygoogle || []).push({});  Setup Apache Commons Text in Java project If you are using Gradle build then add the following dependency configuration into build.</description>
    </item>
    
    <item>
      <title>Capitalize First Letter of a String in Java using Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-capitalize-first-letter-of-string/</link>
      <pubDate>Mon, 05 Oct 2020 21:09:18 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-capitalize-first-letter-of-string/</guid>
      <description>Introduction In this article we show how to use StringUtils of Apache Commons Lang library to capitalize the first character of a Java String by using StringUtils.capitalize() utility method.
   (adsbygoogle = window.adsbygoogle || []).push({});  Setup Apache Commons Lang in Java project If you are using Gradle build then add the following dependency configuration into build.gradle file.
compile group: &amp;#39;org.apache.commons&amp;#39;, name: &amp;#39;commons-lang3&amp;#39;, version: &amp;#39;3.11&amp;#39; Or add the following dependency XML tag to pom.</description>
    </item>
    
    <item>
      <title>Abbreviates a String using ellipses in Java using Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-abbreviates-string-using-ellipses/</link>
      <pubDate>Sun, 04 Oct 2020 23:50:42 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-abbreviates-string-using-ellipses/</guid>
      <description>Introduction In this post we show how to use Apache Commons Lang library to abbreviate a String using ellipses. We provide multiple Java code examples on how to use StringUtils.abbreviate() utility method to achieve our goal.
   (adsbygoogle = window.adsbygoogle || []).push({});  Setup Apache Commons Lang in Java project If you are using Gradle build then add the following dependency configuration into build.gradle file.
compile group: &amp;#39;org.</description>
    </item>
    
    <item>
      <title>Check if a String is a valid numeric value in Java using Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-check-if-string-is-valid-numeric-value/</link>
      <pubDate>Sun, 04 Oct 2020 23:07:43 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-check-if-string-is-valid-numeric-value/</guid>
      <description>Introduction In this article we show you how to use different utility classes in Apache Commons Lang library to check if a String is a valid number in Java. We provide different working code examples how to use methods such as NumberUtils.isCreatable(), NumberUtils.isDigits() or StringUtils.isNumeric().
   (adsbygoogle = window.adsbygoogle || []).push({});  Setup Apache Commons Lang in Java project If you are using Gradle build then add the following dependency configuration into build.</description>
    </item>
    
    <item>
      <title>Check if a String contains another String in Java</title>
      <link>https://simplesolution.dev/java-check-if-a-string-contains-a-substring/</link>
      <pubDate>Sun, 04 Oct 2020 15:57:35 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-check-if-a-string-contains-a-substring/</guid>
      <description>Core Java classes provide different solutions that developers can use to check if a String contains another String inside it. In this article we will show you different Java code examples how to check if a String is inside another String using core Java methods such as String.contains(), String.indexOf(), String.lastIndexOf(), String.matches() and java.util.regex.Pattern class.
   (adsbygoogle = window.adsbygoogle || []).push({});  Java code how to use String.contains() In this code example we use String.</description>
    </item>
    
    <item>
      <title>Replace or Remove All Digits of a String in Java using regular expression</title>
      <link>https://simplesolution.dev/java-replace-or-remove-all-digits-of-a-string-in-using-regular-expression/</link>
      <pubDate>Sun, 04 Oct 2020 13:47:34 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-replace-or-remove-all-digits-of-a-string-in-using-regular-expression/</guid>
      <description>In this article we are going to learn how to use core Java classes to remove all numeric characters from a String or replace numeric characters with other characters. We will show you different Java code examples how to use String.replaceAll() method and java.util.regex.Pattern class.
   (adsbygoogle = window.adsbygoogle || []).push({});  Java code example using regex &amp;ldquo;[0-9]&amp;rdquo; with String.replaceAll() method
public class RemoveReplaceDigitsExample1 { public static void main(String[] args) { String testString = &amp;#34;Your OTP (one time password) is 112233&amp;#34;; // Remove all numeric characters  String removedDigitsString = testString.</description>
    </item>
    
    <item>
      <title>Extract Digits from a String in Java using regular expression</title>
      <link>https://simplesolution.dev/java-extract-digits-from-a-string-using-regular-expression/</link>
      <pubDate>Sat, 03 Oct 2020 22:17:59 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-extract-digits-from-a-string-using-regular-expression/</guid>
      <description>In this post we show you how to use regular expressions to remove all non-digits characters of a String and return the number only String in Java application.
   (adsbygoogle = window.adsbygoogle || []).push({});  Following Java example code use String.replaceAll() method with regex &amp;ldquo;[^0-9]&amp;rdquo; to replace non-digits characters in a String with empty String.
public class ExtractDigitsFromStringExample1 { public static void main(String[] args) { String testString = &amp;#34;Java was released in 1995&amp;#34;; String numberOnlyString = testString.</description>
    </item>
    
    <item>
      <title>Java Find Difference between two Strings using StringUtils Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-find-difference-between-two-strings-using-stringutils-apache-commons-lang/</link>
      <pubDate>Fri, 02 Oct 2020 22:57:11 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-find-difference-between-two-strings-using-stringutils-apache-commons-lang/</guid>
      <description>Introduction In this post we will show you Java example code how to find the difference between two Strings using StringUtils utility class of Apache Commons Lang library.
   (adsbygoogle = window.adsbygoogle || []).push({});  Setup Apache Commons Lang in Java project If you are using Gradle build then add the following dependency configuration into build.gradle file.
compile group: &amp;#39;org.apache.commons&amp;#39;, name: &amp;#39;commons-lang3&amp;#39;, version: &amp;#39;3.11&amp;#39; Or add the following dependency XML tag to pom.</description>
    </item>
    
    <item>
      <title>Java check String is empty or blank or contains text using StringUtils Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-check-string-is-empty-blank-contains-text-stringutils-apache-commons-lang/</link>
      <pubDate>Fri, 02 Oct 2020 00:32:50 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-check-string-is-empty-blank-contains-text-stringutils-apache-commons-lang/</guid>
      <description>Introduction In this post we are going to learn how to use StringUtils utility class of Apache Commons Lang library in Java application to check if a string contains text, an empty string or a blank string.
   (adsbygoogle = window.adsbygoogle || []).push({});  Setup Apache Commons Lang in Java project If you are using Gradle build then add the following dependency configuration into build.gradle file.
compile group: &amp;#39;org.</description>
    </item>
    
    <item>
      <title>Google Guava in Java to join String with Joiner</title>
      <link>https://simplesolution.dev/java-code-examples/guava-java-join-string-with-joiner/</link>
      <pubDate>Fri, 03 May 2019 01:00:10 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-code-examples/guava-java-join-string-with-joiner/</guid>
      <description>Java Code Examples for using com.google.common.base.Joiner class
   (adsbygoogle = window.adsbygoogle || []).push({});  Example for using Joiner that skip joining null values package simplesolution.dev;import com.google.common.base.Joiner;public class GuavaJoinerExample1 {public static void main(String... args) {final Joiner joiner = Joiner.on(&amp;#34; and &amp;#34;).skipNulls();String result = joiner.join(&amp;#34;Java&amp;#34;, &amp;#34;Python&amp;#34;, null, &amp;#34;Go&amp;#34;);System.out.println(result);}} Output
Java and Python and Go     (adsbygoogle = window.adsbygoogle || []).</description>
    </item>
    
  </channel>
</rss>