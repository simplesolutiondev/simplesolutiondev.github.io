<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>String on Simple Solution</title>
    <link>https://simplesolution.dev/tag/string/</link>
    <description>Recent content in String on Simple Solution</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Oct 2020 21:09:18 +0700</lastBuildDate>
    
	<atom:link href="https://simplesolution.dev/tag/string/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Capitalize First Letter of a String in Java using Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-capitalize-first-letter-of-string/</link>
      <pubDate>Mon, 05 Oct 2020 21:09:18 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-capitalize-first-letter-of-string/</guid>
      <description>Introduction In this article we show how to use StringUtils of Apache Commons Lang library to capitalize the first character of a Java String by using StringUtils.capitalize() utility method.
Setup Apache Commons Lang in Java project If you are using Gradle build then add the following dependency configuration into build.gradle file.
compile group: &amp;#39;org.apache.commons&amp;#39;, name: &amp;#39;commons-lang3&amp;#39;, version: &amp;#39;3.11&amp;#39; Or add the following dependency XML tag to pom.xml file if you are using Maven build.</description>
    </item>
    
    <item>
      <title>Abbreviates a String using ellipses in Java using Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-abbreviates-string-using-ellipses/</link>
      <pubDate>Sun, 04 Oct 2020 23:50:42 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-abbreviates-string-using-ellipses/</guid>
      <description>Introduction In this post we show how to use Apache Commons Lang library to abbreviate a String using ellipses. We provide multiple Java code examples on how to use StringUtils.abbreviate() utility method to achieve our goal.
Setup Apache Commons Lang in Java project If you are using Gradle build then add the following dependency configuration into build.gradle file.
compile group: &amp;#39;org.apache.commons&amp;#39;, name: &amp;#39;commons-lang3&amp;#39;, version: &amp;#39;3.11&amp;#39; Or add the following dependency XML tag to pom.</description>
    </item>
    
    <item>
      <title>Check if a String is a valid numeric value in Java using Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-check-if-string-is-valid-numeric-value/</link>
      <pubDate>Sun, 04 Oct 2020 23:07:43 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-check-if-string-is-valid-numeric-value/</guid>
      <description>Introduction In this article we show you how to use different utility classes in Apache Commons Lang library to check if a String is a valid number in Java. We provide different working code examples how to use methods such as NumberUtils.isCreatable(), NumberUtils.isDigits() or StringUtils.isNumeric().
Setup Apache Commons Lang in Java project If you are using Gradle build then add the following dependency configuration into build.gradle file.
compile group: &amp;#39;org.</description>
    </item>
    
    <item>
      <title>Check if a String contains another String in Java</title>
      <link>https://simplesolution.dev/java-check-if-a-string-contains-a-substring/</link>
      <pubDate>Sun, 04 Oct 2020 15:57:35 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-check-if-a-string-contains-a-substring/</guid>
      <description>Core Java classes provide different solutions that developers can use to check if a String contains another String inside it. In this article we will show you different Java code examples how to check if a String is inside another String using core Java methods such as String.contains(), String.indexOf(), String.lastIndexOf(), String.matches() and java.util.regex.Pattern class.
Java code how to use String.contains() In this code example we use String.contains() which returns a boolean value true if and only if the String contains a specific substring.</description>
    </item>
    
    <item>
      <title>Replace or Remove All Digits of a String in Java using regular expression</title>
      <link>https://simplesolution.dev/java-replace-or-remove-all-digits-of-a-string-in-using-regular-expression/</link>
      <pubDate>Sun, 04 Oct 2020 13:47:34 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-replace-or-remove-all-digits-of-a-string-in-using-regular-expression/</guid>
      <description>In this article we are going to learn how to use core Java classes to remove all numeric characters from a String or replace numeric characters with other characters. We will show you different Java code examples how to use String.replaceAll() method and java.util.regex.Pattern class.
Java code example using regex &amp;ldquo;[0-9]&amp;rdquo; with String.replaceAll() method
public class RemoveReplaceDigitsExample1 { public static void main(String[] args) { String testString = &amp;#34;Your OTP (one time password) is 112233&amp;#34;; // Remove all numeric characters  String removedDigitsString = testString.</description>
    </item>
    
    <item>
      <title>Extract Digits from a String in Java using regular expression</title>
      <link>https://simplesolution.dev/java-extract-digits-from-a-string-using-regular-expression/</link>
      <pubDate>Sat, 03 Oct 2020 22:17:59 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-extract-digits-from-a-string-using-regular-expression/</guid>
      <description>In this post we show you how to use regular expressions to remove all non-digits characters of a String and return the number only String in Java application.
Following Java example code use String.replaceAll() method with regex &amp;ldquo;[^0-9]&amp;rdquo; to replace non-digits characters in a String with empty String.
public class ExtractDigitsFromStringExample1 { public static void main(String[] args) { String testString = &amp;#34;Java was released in 1995&amp;#34;; String numberOnlyString = testString.replaceAll(&amp;#34;[^0-9]&amp;#34;, &amp;#34;&amp;#34;); System.</description>
    </item>
    
    <item>
      <title>Java Find Difference between two Strings using StringUtils Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-find-difference-between-two-strings-using-stringutils-apache-commons-lang/</link>
      <pubDate>Fri, 02 Oct 2020 22:57:11 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-find-difference-between-two-strings-using-stringutils-apache-commons-lang/</guid>
      <description>Introduction In this post we will show you Java example code how to find the difference between two Strings using StringUtils utility class of Apache Commons Lang library.
Setup Apache Commons Lang in Java project If you are using Gradle build then add the following dependency configuration into build.gradle file.
compile group: &amp;#39;org.apache.commons&amp;#39;, name: &amp;#39;commons-lang3&amp;#39;, version: &amp;#39;3.11&amp;#39; Or add the following dependency XML tag to pom.xml file if you are using Maven build.</description>
    </item>
    
    <item>
      <title>Java check String is empty or blank or contains text using StringUtils Apache Commons Lang</title>
      <link>https://simplesolution.dev/java-check-string-is-empty-blank-contains-text-stringutils-apache-commons-lang/</link>
      <pubDate>Fri, 02 Oct 2020 00:32:50 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-check-string-is-empty-blank-contains-text-stringutils-apache-commons-lang/</guid>
      <description>Introduction In this post we are going to learn how to use StringUtils utility class of Apache Commons Lang library in Java application to check if a string contains text, an empty string or a blank string.
Setup Apache Commons Lang in Java project If you are using Gradle build then add the following dependency configuration into build.gradle file.
compile group: &amp;#39;org.apache.commons&amp;#39;, name: &amp;#39;commons-lang3&amp;#39;, version: &amp;#39;3.11&amp;#39; Or add the following dependency XML tag to pom.</description>
    </item>
    
    <item>
      <title>Google Guava in Java to join String with Joiner</title>
      <link>https://simplesolution.dev/java-code-examples/guava-java-join-string-with-joiner/</link>
      <pubDate>Fri, 03 May 2019 01:00:10 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-code-examples/guava-java-join-string-with-joiner/</guid>
      <description>Java Code Examples for using com.google.common.base.Joiner class
   (adsbygoogle = window.adsbygoogle || []).push({});  Example for using Joiner that skip joining null values package simplesolution.dev;import com.google.common.base.Joiner;public class GuavaJoinerExample1 {public static void main(String... args) {final Joiner joiner = Joiner.on(&amp;#34; and &amp;#34;).skipNulls();String result = joiner.join(&amp;#34;Java&amp;#34;, &amp;#34;Python&amp;#34;, null, &amp;#34;Go&amp;#34;);System.out.println(result);}} Output
Java and Python and Go  Example for using Joiner to join objects package simplesolution.</description>
    </item>
    
  </channel>
</rss>