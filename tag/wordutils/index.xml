<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wordutils on Simple Solution</title>
    <link>https://simplesolution.dev/tag/wordutils/</link>
    <description>Recent content in Wordutils on Simple Solution</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Oct 2020 23:20:52 +0700</lastBuildDate>
    
	<atom:link href="https://simplesolution.dev/tag/wordutils/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java extracts initial characters from each word in a String using Apache Commons Text</title>
      <link>https://simplesolution.dev/java-extracts-initial-characters-from-each-word-in-a-string/</link>
      <pubDate>Tue, 06 Oct 2020 23:20:52 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-extracts-initial-characters-from-each-word-in-a-string/</guid>
      <description>Introduction In this post we learn how to use WordUtils class of Apache Commons Text library to extract initial characters from all words of a String in Java. We will show the Java code example that uses WordUtils.initials() method to extract initial letters of people names.
Setup Apache Commons Text in Java project If you are using Gradle build then add the following dependency configuration into build.gradle file.
compile group: &amp;#39;org.</description>
    </item>
    
    <item>
      <title>Java Checks if a String contains all words in array using Apache Commons Text</title>
      <link>https://simplesolution.dev/java-checks-if-a-string-contains-all-words-in-array/</link>
      <pubDate>Tue, 06 Oct 2020 22:41:54 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-checks-if-a-string-contains-all-words-in-array/</guid>
      <description>Introduction In this article we show how to check if a String contains all words in an array in Java. By using WordUtils utility class of Apache Commons Text library you can check if the String contains all words in the given array using containsAllWords() method.
Setup Apache Commons Text in Java project If you are using Gradle build then add the following dependency configuration into build.gradle file.
compile group: &amp;#39;org.</description>
    </item>
    
    <item>
      <title>Wrap a line of text into multiple lines in Java using Apache Commons Text</title>
      <link>https://simplesolution.dev/java-wrap-a-line-of-text-into-multiple-lines/</link>
      <pubDate>Tue, 06 Oct 2020 20:34:43 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-wrap-a-line-of-text-into-multiple-lines/</guid>
      <description>Introduction In this post we learn how to wrap a String in Java using WordUtils utility class of Apache Commons Text library. By using WordUtils.wrap() method we can break a long line of text into multiple lines with a given input text and the length. The output String will be wrapped words and separated by system line separator character or by your custom provided separator.
Setup Apache Commons Text in Java project If you are using Gradle build then add the following dependency configuration into build.</description>
    </item>
    
    <item>
      <title>Capitalize First Letter of each Word of String in Java using Apache Commons Text</title>
      <link>https://simplesolution.dev/java-capitalize-first-letter-of-each-word-of-string/</link>
      <pubDate>Mon, 05 Oct 2020 22:03:37 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-capitalize-first-letter-of-each-word-of-string/</guid>
      <description>Introduction In this article we show how to use WordUtils utility class of Apache Commons Text library to capitalize the first character of each word in a Java String. We will provide Java code examples to show how to use capitalize() and capitalizeFully() methods of the libraryâ€™s WordUtils utility class.
Setup Apache Commons Text in Java project If you are using Gradle build then add the following dependency configuration into build.</description>
    </item>
    
  </channel>
</rss>