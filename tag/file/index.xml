<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>File on Simple Solution</title>
    <link>https://simplesolution.dev/tag/file/</link>
    <description>Recent content in File on Simple Solution</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 May 2021 23:54:01 +0700</lastBuildDate>
    
	<atom:link href="https://simplesolution.dev/tag/file/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Copy Content from URL to File in Java using Apache Commons IO</title>
      <link>https://simplesolution.dev/java-copy-content-from-url-to-file-using-apache-commons-io/</link>
      <pubDate>Tue, 25 May 2021 23:54:01 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-copy-content-from-url-to-file-using-apache-commons-io/</guid>
      <description>In this Java tutorial we show you how to download and copy contents from a given URL into a File using the FileUtils class of Apache Commons IO library.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Apache Commons IO library to your Java project To use the Apache Commons IO library in the Gradle build project, add the following dependency into the build.gradle file.</description>
    </item>
    
    <item>
      <title>Copy List of Files to Directory in Java using Apache Commons IO</title>
      <link>https://simplesolution.dev/java-copy-list-of-files-to-directory-using-apache-commons-io/</link>
      <pubDate>Tue, 25 May 2021 23:51:48 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-copy-list-of-files-to-directory-using-apache-commons-io/</guid>
      <description>In this Java tutorial we learn how to use the FileUtils class of Apache Commons IO library to copy multiple files to a given directory.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Apache Commons IO library to your Java project To use the Apache Commons IO library in the Gradle build project, add the following dependency into the build.gradle file.
implementation &amp;#39;commons-io:commons-io:2.8.0&amp;#39; To use the Apache Commons IO library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Copy InputStream to File in Java using Apache Commons IO</title>
      <link>https://simplesolution.dev/java-copy-inputstream-to-file-using-apache-commons-io/</link>
      <pubDate>Tue, 25 May 2021 23:48:30 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-copy-inputstream-to-file-using-apache-commons-io/</guid>
      <description>In this Java tutorial we learn how to use the FileUtils utility class of Apache Commons IO library to copy bytes of an InputStream into a destination File.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Apache Commons IO library to your Java project To use the Apache Commons IO library in the Gradle build project, add the following dependency into the build.gradle file.
implementation &amp;#39;commons-io:commons-io:2.</description>
    </item>
    
    <item>
      <title>Copy a File to Directory in Java using Apache Commons IO</title>
      <link>https://simplesolution.dev/java-copy-file-to-directory-using-apache-commons-io/</link>
      <pubDate>Tue, 25 May 2021 23:45:13 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-copy-file-to-directory-using-apache-commons-io/</guid>
      <description>In this Java tutorial, we learn how to copy a file to a specified directory using the FileUtils class of Apache Commons IO library.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Apache Commons IO library to your Java project To use the Apache Commons IO library in the Gradle build project, add the following dependency into the build.gradle file.
implementation &amp;#39;commons-io:commons-io:2.8.0&amp;#39; To use the Apache Commons IO library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Copy a File in Java using Apache Commons IO</title>
      <link>https://simplesolution.dev/java-copy-a-file-using-apache-commons-io/</link>
      <pubDate>Tue, 25 May 2021 23:42:09 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-copy-a-file-using-apache-commons-io/</guid>
      <description>In this Java tutorial, we learn how to copy a file to a new location using FileUtils class of Apache Commons IO library.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Apache Commons IO library to your Java project To use the Apache Commons IO library in the Gradle build project, add the following dependency into the build.gradle file.
implementation &amp;#39;commons-io:commons-io:2.8.0&amp;#39; To use the Apache Commons IO library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Copy Directory to Directory in Java using Apache Commons IO</title>
      <link>https://simplesolution.dev/java-copy-directory-to-directory-using-apache-commons-io/</link>
      <pubDate>Tue, 25 May 2021 23:39:24 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-copy-directory-to-directory-using-apache-commons-io/</guid>
      <description>In this Java tutorial, we learn how to copy a whole directory to another directory using the FileUtils class of Apache Commons IO library.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Apache Commons IO library to your Java project To use the Apache Commons IO library in the Gradle build project, add the following dependency into the build.gradle file.
implementation &amp;#39;commons-io:commons-io:2.8.0&amp;#39; To use the Apache Commons IO library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Compare Contents of Files in Java using Apache Commons IO</title>
      <link>https://simplesolution.dev/java-compare-contents-of-files-using-apache-commons-io/</link>
      <pubDate>Tue, 25 May 2021 23:36:29 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-compare-contents-of-files-using-apache-commons-io/</guid>
      <description>In this Java tutorial we learn how to use the FileUtils class of Apache Commons IO library to compare the contents of two files to determine if they are equal or not equal.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Apache Commons IO library to your Java project To use the Apache Commons IO library in the Gradle build project, add the following dependency into the build.</description>
    </item>
    
    <item>
      <title>Java Delete All Files and Directories Inside a Directory using Apache Commons IO</title>
      <link>https://simplesolution.dev/java-delete-files-and-directories-inside-directory-using-apache-commons-io/</link>
      <pubDate>Tue, 25 May 2021 23:33:30 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-delete-files-and-directories-inside-directory-using-apache-commons-io/</guid>
      <description>In this Java tutorial we show you how to use the FileUtils class of Apache Commons IO library to delete all files and directories in a given directory.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Apache Commons IO library to your Java project To use the Apache Commons IO library in the Gradle build project, add the following dependency into the build.gradle file.
implementation &amp;#39;commons-io:commons-io:2.</description>
    </item>
    
    <item>
      <title>Compute Checksum of File in Java using Apache Commons IO</title>
      <link>https://simplesolution.dev/java-compute-checksum-of-file-using-apache-commons-io/</link>
      <pubDate>Tue, 25 May 2021 23:27:08 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-compute-checksum-of-file-using-apache-commons-io/</guid>
      <description>In this Java tutorial, we learn how to compute the Adler-32 or CRC-32 checksum value of a file using FileUtils class of Apache Commons IO library.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Apache Commons IO library to your Java project To use the Apache Commons IO library in the Gradle build project, add the following dependency into the build.gradle file.
implementation &amp;#39;commons-io:commons-io:2.8.0&amp;#39; To use the Apache Commons IO library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Extract .zip File in Java using Apache Commons Compress</title>
      <link>https://simplesolution.dev/java-extract-zip-file-using-apache-commons-compress/</link>
      <pubDate>Mon, 11 Jan 2021 01:16:12 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-extract-zip-file-using-apache-commons-compress/</guid>
      <description>In this Java tutorial, we learn how to use the Apache Commons Compress library to extract a .zip file into a directory in the Java program.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add Apache Commons Compress library to your Java project To use Apache Commons Compress Java library in the Gradle build project, add the following dependency into the build.gradle file.
compile group: &amp;#39;org.apache.commons&amp;#39;, name: &amp;#39;commons-compress&amp;#39;, version: &amp;#39;1.</description>
    </item>
    
    <item>
      <title>Create .zip File in Java using Apache Commons Compress</title>
      <link>https://simplesolution.dev/java-create-zip-file-using-apache-commons-compress/</link>
      <pubDate>Mon, 11 Jan 2021 01:15:48 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-create-zip-file-using-apache-commons-compress/</guid>
      <description>In this Java tutorial, we learn how to use the Apache Commons Compress library to create a .zip file in the Java program.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add Apache Commons Compress library to your Java project To use Apache Commons Compress Java library in the Gradle build project, add the following dependency into the build.gradle file.
compile group: &amp;#39;org.apache.commons&amp;#39;, name: &amp;#39;commons-compress&amp;#39;, version: &amp;#39;1.20&amp;#39; To use Apache Commons Compress Java library in the Maven build project, add the following dependency into the pom.</description>
    </item>
    
    <item>
      <title>Read and Parse CSV File in Java using Apache Commons CSV</title>
      <link>https://simplesolution.dev/java-read-and-parse-csv-file-using-apache-commons-csv/</link>
      <pubDate>Thu, 17 Dec 2020 00:06:32 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-read-and-parse-csv-file-using-apache-commons-csv/</guid>
      <description>In this tutorial, we learn how to parse CSV files in a Java application using Apache Commons CSV library. Via different Java code examples we learn how to create the CSV parser from File, InputStream, Path or Reader objects.
Add Apache Commons CSV library to your Java project To use Apache Commons CSV Java library in the Gradle build project, add the following dependency into the build.gradle file. compile group: &amp;#39;org.</description>
    </item>
    
    <item>
      <title>Create Temporary File in Java</title>
      <link>https://simplesolution.dev/java-create-temporary-file/</link>
      <pubDate>Wed, 02 Dec 2020 23:38:36 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-create-temporary-file/</guid>
      <description>In this tutorial, we are going to learn how to create a new temporary file in a Java program by using core Java API.
   (adsbygoogle = window.adsbygoogle || []).push({});  Using Java NIO Files.createTempFile() method to create temporary file The following Java example program to create a new temporary file in the default temporary directory in your machine. In order to create a new temp file you need to provide file name prefix and file extension (or file suffix), the method creates a new file with a unique name in your temporary directory.</description>
    </item>
    
    <item>
      <title>Read QR Code from Image File or Base64 String in Java using ZXing</title>
      <link>https://simplesolution.dev/java-read-qr-code-from-image-file-base64-zxing/</link>
      <pubDate>Mon, 26 Oct 2020 21:46:52 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-read-qr-code-from-image-file-base64-zxing/</guid>
      <description>Introduction In this tutorial, we are going to learn how to decode the QR code image to read the encoded text in a Java application. We will use ZXing open source library in order to decode the image. Via different Java code examples we show you how to extract text from an image file and from encoded base64 string image.
   (adsbygoogle = window.adsbygoogle || []).push({});  Add ZXing library to the project To use ZXing Java library in the Gradle build project, add the following dependencies into the build.</description>
    </item>
    
    <item>
      <title>Read Text Files in Java</title>
      <link>https://simplesolution.dev/java-read-text-files/</link>
      <pubDate>Sat, 24 Oct 2020 20:13:34 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-read-text-files/</guid>
      <description>Introduction In this tutorial we are going to explore how to read text files in a Java program. We provide different solutions to show how to use different Java core classes of Java IO and NIO packages to read files.
   (adsbygoogle = window.adsbygoogle || []).push({});  Java NIO Files.readAllLines() static method In this Java code example we use Files.readAllLines() method to read all lines from a file into a list of String.</description>
    </item>
    
    <item>
      <title>Spring Boot Web Application Export and Download Text File</title>
      <link>https://simplesolution.dev/spring-boot-export-download-text-file/</link>
      <pubDate>Sat, 24 Oct 2020 00:33:28 +0700</pubDate>
      
      <guid>https://simplesolution.dev/spring-boot-export-download-text-file/</guid>
      <description>Introduction In this tutorial we learn how to create a new text file and provide the user the web interface to download the text file in a Spring Boot web application. We will learn how to download a text file in Spring Boot with 5 different approaches to implement the feature.
   (adsbygoogle = window.adsbygoogle || []).push({});  Create New Spring Boot Web Project From Spring Tool Suite IDE select menu File &amp;gt; New &amp;gt; Spring Starter Project.</description>
    </item>
    
    <item>
      <title>Create New Files in Java</title>
      <link>https://simplesolution.dev/java-create-new-files/</link>
      <pubDate>Thu, 22 Oct 2020 23:58:42 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-create-new-files/</guid>
      <description>Introduction In this article we learn how to create a new file in a Java application by using core Java classes of IO and NIO packages.
   (adsbygoogle = window.adsbygoogle || []).push({});  Using Java NIO Files.createFile() static method import java.io.IOException; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; public class FilesCreateFileExample { public static void main(String... args) { try { String fileName = &amp;#34;D:\\Files\\test.txt&amp;#34;; Path filePath = Paths.get(fileName); Path createdFile = Files.</description>
    </item>
    
    <item>
      <title>Check Hidden Files in Java</title>
      <link>https://simplesolution.dev/java-check-hidden-files/</link>
      <pubDate>Thu, 22 Oct 2020 22:15:25 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-check-hidden-files/</guid>
      <description>Introduction In this post we are going to explore how to use Java IO and Java NIO core classes to check if a file is hidden or not.
For example we have a text file is a hidden file located at D:\Files\file.txt
   (adsbygoogle = window.adsbygoogle || []).push({});  Using Java NIO Files.isHidden() static method import java.io.IOException; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; public class FilesIsHiddenExample { public static void main(String.</description>
    </item>
    
    <item>
      <title>Write Text to a File in Java</title>
      <link>https://simplesolution.dev/java-write-text-file/</link>
      <pubDate>Wed, 21 Oct 2020 22:59:16 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-write-text-file/</guid>
      <description>Introduction In this tutorial we are going to learn how to write text to a text file in a Java application. By different Java example programs we will explore different approaches to write a String into a text file using Java core classes.
   (adsbygoogle = window.adsbygoogle || []).push({});  Using Java NIO Files.write() static method Following program to create a new file named test.txt and write text using Files.</description>
    </item>
    
    <item>
      <title>Get Absolute File Path of a File in Java</title>
      <link>https://simplesolution.dev/java-get-absolute-file-path/</link>
      <pubDate>Wed, 21 Oct 2020 01:26:45 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-get-absolute-file-path/</guid>
      <description>Introduction In this post we will explore how to get an absolute path of a file in a Java application and return it as a String value.
   (adsbygoogle = window.adsbygoogle || []).push({});  Using Java NIO Path.toAbsolutePath() method import java.nio.file.Path; import java.nio.file.Paths; public class PathToAbsolutePathExample { public static void main(String... args) { String fileName = &amp;#34;simple-solution-logo.png&amp;#34;; Path path = Paths.get(fileName); Path absolutePath = path.toAbsolutePath(); String absoluteFilePath = absolutePath.</description>
    </item>
    
    <item>
      <title>Get File Size in Java</title>
      <link>https://simplesolution.dev/java-get-file-size/</link>
      <pubDate>Sun, 18 Oct 2020 22:55:19 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-get-file-size/</guid>
      <description>Introduction In this post we are going to explore how to get file size in bytes, kilobytes, megabytes or gigabytes in different Java versions.
For example we have a file located at D:\SimpleSolution\logo.png as following screenshot.
   (adsbygoogle = window.adsbygoogle || []).push({});  Using NIO Files.size() method with Java version 7 and above import java.io.IOException; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; public class GetFileSizeExample1 { public static void main(String[] args) { try { String fileLocation = &amp;#34;D:\\SimpleSolution\\logo.</description>
    </item>
    
    <item>
      <title>Writing Excel File Using Apache POI Library in Java</title>
      <link>https://simplesolution.dev/writing-excel-file-using-apache-poi-library-in-java/</link>
      <pubDate>Tue, 26 Mar 2019 20:34:25 +0700</pubDate>
      
      <guid>https://simplesolution.dev/writing-excel-file-using-apache-poi-library-in-java/</guid>
      <description>Apache POI is and open source Java library allow you to read and write Microsoft Documents such as Excel workbook, Word document, Powerpoint presentation.
In this blog post I will show you how to use Apache POI library to writing an Excel file. Throughout this blog post we will implement an Java application to generate the Excel file as the figure below:
   (adsbygoogle = window.adsbygoogle || []).</description>
    </item>
    
  </channel>
</rss>