<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>File on Simple Solution</title>
    <link>https://simplesolution.dev/tag/file/</link>
    <description>Recent content in File on Simple Solution</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Oct 2020 23:58:42 +0700</lastBuildDate>
    
	<atom:link href="https://simplesolution.dev/tag/file/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Create New Files in Java</title>
      <link>https://simplesolution.dev/java-create-new-files/</link>
      <pubDate>Thu, 22 Oct 2020 23:58:42 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-create-new-files/</guid>
      <description>Introduction In this article we learn how to create a new file in a Java application by using core Java classes of IO and NIO packages.
   (adsbygoogle = window.adsbygoogle || []).push({});  Using Java NIO Files.createFile() static method import java.io.IOException; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; public class FilesCreateFileExample { public static void main(String... args) { try { String fileName = &amp;#34;D:\\Files\\test.txt&amp;#34;; Path filePath = Paths.get(fileName); Path createdFile = Files.</description>
    </item>
    
    <item>
      <title>Check Hidden Files in Java</title>
      <link>https://simplesolution.dev/java-check-hidden-files/</link>
      <pubDate>Thu, 22 Oct 2020 22:15:25 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-check-hidden-files/</guid>
      <description>Introduction In this post we are going to explore how to use Java IO and Java NIO core classes to check if a file is hidden or not.
For example we have a text file is a hidden file located at D:\Files\file.txt
   (adsbygoogle = window.adsbygoogle || []).push({});  Using Java NIO Files.isHidden() static method import java.io.IOException; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; public class FilesIsHiddenExample { public static void main(String.</description>
    </item>
    
    <item>
      <title>Write Text to a File in Java</title>
      <link>https://simplesolution.dev/java-write-text-file/</link>
      <pubDate>Wed, 21 Oct 2020 22:59:16 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-write-text-file/</guid>
      <description>Introduction In this tutorial we are going to learn how to write text to a text file in a Java application. By different Java example programs we will explore different approaches to write a String into a text file using Java core classes.
   (adsbygoogle = window.adsbygoogle || []).push({});  Using Java NIO Files.write() static method Following program to create a new file named test.txt and write text using Files.</description>
    </item>
    
    <item>
      <title>Get Absolute File Path of a File in Java</title>
      <link>https://simplesolution.dev/java-get-absolute-file-path/</link>
      <pubDate>Wed, 21 Oct 2020 01:26:45 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-get-absolute-file-path/</guid>
      <description>Introduction In this post we will explore how to get an absolute path of a file in a Java application and return it as a String value.
   (adsbygoogle = window.adsbygoogle || []).push({});  Using Java NIO Path.toAbsolutePath() method import java.nio.file.Path; import java.nio.file.Paths; public class PathToAbsolutePathExample { public static void main(String... args) { String fileName = &amp;#34;simple-solution-logo.png&amp;#34;; Path path = Paths.get(fileName); Path absolutePath = path.toAbsolutePath(); String absoluteFilePath = absolutePath.</description>
    </item>
    
    <item>
      <title>Get File Size in Java</title>
      <link>https://simplesolution.dev/java-get-file-size/</link>
      <pubDate>Sun, 18 Oct 2020 22:55:19 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-get-file-size/</guid>
      <description>Introduction In this post we are going to explore how to get file size in bytes, kilobytes, megabytes or gigabytes in different Java versions.
For example we have a file located at D:\SimpleSolution\logo.png as following screenshot.
   (adsbygoogle = window.adsbygoogle || []).push({});  Using NIO Files.size() method with Java version 7 and above import java.io.IOException; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; public class GetFileSizeExample1 { public static void main(String[] args) { try { String fileLocation = &amp;#34;D:\\SimpleSolution\\logo.</description>
    </item>
    
    <item>
      <title>Writing Excel File Using Apache POI Library in Java</title>
      <link>https://simplesolution.dev/writing-excel-file-using-apache-poi-library-in-java/</link>
      <pubDate>Tue, 26 Mar 2019 20:34:25 +0700</pubDate>
      
      <guid>https://simplesolution.dev/writing-excel-file-using-apache-poi-library-in-java/</guid>
      <description>Apache POI is and open source Java library allow you to read and write Microsoft Documents such as Excel workbook, Word document, Powerpoint presentation.
In this blog post I will show you how to use Apache POI library to writing an Excel file. Throughout this blog post we will implement an Java application to generate the Excel file as the figure below:
   (adsbygoogle = window.adsbygoogle || []).</description>
    </item>
    
  </channel>
</rss>