<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Simple Solution</title>
    <link>https://simplesolution.dev/tag/java/</link>
    <description>Recent content in Java on Simple Solution</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 Dec 2019 10:26:47 +0700</lastBuildDate>
    
	<atom:link href="https://simplesolution.dev/tag/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Creating PDF Document File in Java using Apache PDFBox</title>
      <link>https://simplesolution.dev/creating-pdf-document-file-in-java-using-apache-pdfbox/</link>
      <pubDate>Sun, 29 Dec 2019 10:26:47 +0700</pubDate>
      
      <guid>https://simplesolution.dev/creating-pdf-document-file-in-java-using-apache-pdfbox/</guid>
      <description>Introduction In this tutorial we will learn how to create a PDF document file in Java application using Apache PDFBox library.
Apache PDFBox Overview The Apache PDFBox is an open source library for working with PDF documents in Java. You can get more information about the project at pdfbox.apache.org
   (adsbygoogle = window.adsbygoogle || []).push({});  Adding Apache PDFBox Dependencies Adding below dependencies to build.gradle file if you are using Gradle build tool.</description>
    </item>
    
    <item>
      <title>Using Dozer Spring Boot Starter</title>
      <link>https://simplesolution.dev/using-dozer-spring-boot-starter/</link>
      <pubDate>Wed, 18 Dec 2019 00:20:41 +0700</pubDate>
      
      <guid>https://simplesolution.dev/using-dozer-spring-boot-starter/</guid>
      <description>In this Spring Boot tutorial we will go through step by step guide to creating a Spring Boot console application and configure Dozer Spring Boot Starter library to using Dozer mapping in Spring Boot application.
Creating Spring Boot Console Application Project Open your Spring Tool Suite IDE and choose menu File -&amp;gt; New -&amp;gt; Spring Starter Project
In New Spring Starter Project window input below informations for your project and click Next.</description>
    </item>
    
    <item>
      <title>Video Spring Boot Web Application Download Excel File</title>
      <link>https://simplesolution.dev/video-spring-boot-web-application-download-excel-file/</link>
      <pubDate>Tue, 17 Dec 2019 23:22:50 +0700</pubDate>
      
      <guid>https://simplesolution.dev/video-spring-boot-web-application-download-excel-file/</guid>
      <description>Step by step video how to implement Spring Boot web application with download Excel file using Apache POI libary.
  
The source code in this article can be found at: github.com/simplesolutiondev/DownloadExcelFile
or download at:
 Download Source Code
Happy Coding ðŸ˜Š
Related Articles Spring Boot Web Application Download Excel File
Spring Boot Web Application Download CSV File
Writing Excel File Using Apache POI Library in Java
Creating Spring Boot Application with Spring Tool Suite</description>
    </item>
    
    <item>
      <title>Spring Boot Web Application Download Excel File</title>
      <link>https://simplesolution.dev/spring-boot-web-application-download-excel-file/</link>
      <pubDate>Mon, 16 Dec 2019 00:00:29 +0700</pubDate>
      
      <guid>https://simplesolution.dev/spring-boot-web-application-download-excel-file/</guid>
      <description>In this article we will go through step by step to create Spring Boot web application and implement downloading Excel file feature. I use Spring Tool Suite 4 for creating the application and code editor for demo.
Creating Spring Boot web project using Spring Tool Suite Open Spring Tool Suite on your machine and click on &amp;ldquo;Create a project&amp;hellip;&amp;rdquo; or choose menu File -&amp;gt; New -&amp;gt; Project
On New Project window select Spring Starter Project and click Next</description>
    </item>
    
    <item>
      <title>Spring Boot Web Application Download CSV File</title>
      <link>https://simplesolution.dev/spring-boot-application-download-csv/</link>
      <pubDate>Tue, 14 May 2019 01:00:10 +0700</pubDate>
      
      <guid>https://simplesolution.dev/spring-boot-application-download-csv/</guid>
      <description>In this article we show you how to implement dowloading CSV file in Spring Boot Web Application.
   (adsbygoogle = window.adsbygoogle || []).push({});  Overview Project Structure Throughout this article we implement the Spring Boot project as below structure Gradle Build Dependencies Define below dependencies in build.gradle if you are using gradle. implementation &amp;#39;org.springframework.boot:spring-boot-starter-thymeleaf&amp;#39;implementation &amp;#39;org.springframework.boot:spring-boot-starter-web&amp;#39;
Maven Build Dependencies Define this dependencies in pom.xml if you are using maven.</description>
    </item>
    
    <item>
      <title>Gradle Creating Executable JAR File</title>
      <link>https://simplesolution.dev/gradle-creating-executable-jar-file/</link>
      <pubDate>Wed, 01 May 2019 01:00:10 +0700</pubDate>
      
      <guid>https://simplesolution.dev/gradle-creating-executable-jar-file/</guid>
      <description>In this toturial we will show you how to configure Gradle build script to build the JAR file that can be executed by java command. In this article we just build the simple application without dependencies.
   (adsbygoogle = window.adsbygoogle || []).push({});  For example you have created a standard Gradle project as below structure. With the main class GradleCreatingExecutableJarExample as below.
package simplesolution.dev;public class GradleCreatingExecutableJarExample {public static void main(String.</description>
    </item>
    
    <item>
      <title>Creating Spring Boot Application with Spring Tool Suite</title>
      <link>https://simplesolution.dev/spring-boot-application-spring-tool-suite/</link>
      <pubDate>Thu, 18 Apr 2019 01:02:10 +0700</pubDate>
      
      <guid>https://simplesolution.dev/spring-boot-application-spring-tool-suite/</guid>
      <description>In this article we will learn step by step guide to create a new Spring Boot web application using Spring Tool Suite.
   (adsbygoogle = window.adsbygoogle || []).push({});  You can download Spring Tool Suite from this link
First step, open Spring Tool Suite on your machine and choose menu File -&amp;gt; New -&amp;gt; Spring Starter Project
Then input new project information on New Spring Starter Project popup as below and click on Next button.</description>
    </item>
    
    <item>
      <title>Java Generate SHA-1 using DigestUtils in Apache Commons Codec</title>
      <link>https://simplesolution.dev/java-generate-sha1-digestutils-apache-commons-codec/</link>
      <pubDate>Wed, 10 Apr 2019 14:00:00 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-generate-sha1-digestutils-apache-commons-codec/</guid>
      <description>In below code example you will learn how to use org.apache.commons.codec.digest.DigestUtils class in Apache Commons Codec to generate SHA-1 string in Java.
   (adsbygoogle = window.adsbygoogle || []).push({});  Adding Apache Commons Codec Dependency Define below dependency in build.gradle if you are using gradle. compile group: &amp;#39;commons-codec&amp;#39;, name: &amp;#39;commons-codec&amp;#39;, version: &amp;#39;1.12&amp;#39;
Define this dependency in pom.xml if you are using maven. &amp;lt;dependency&amp;gt;&amp;lt;groupId&amp;gt;commons-codec&amp;lt;/groupId&amp;gt;&amp;lt;artifactId&amp;gt;commons-codec&amp;lt;/artifactId&amp;gt;&amp;lt;version&amp;gt;1.12&amp;lt;/version&amp;gt;&amp;lt;/dependency&amp;gt;
Or you can download the release from Apache Commons Codec home page at: here</description>
    </item>
    
    <item>
      <title>Java Base64 Encoding and Decoding with Apache Commons Codec</title>
      <link>https://simplesolution.dev/java-base64-encoding-decoding-apache-commons-codec/</link>
      <pubDate>Tue, 09 Apr 2019 14:00:00 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-base64-encoding-decoding-apache-commons-codec/</guid>
      <description>In this tutorial you will learn how to encoding and decoding a String in Java using Apache Commons Codec library. The library provide org.apache.commons.codec.binary.Base64 class with different methods to encode and decode data.
   (adsbygoogle = window.adsbygoogle || []).push({});  Adding Dependency Define below dependency in build.gradle if you are using gradle. compile group: &amp;#39;commons-codec&amp;#39;, name: &amp;#39;commons-codec&amp;#39;, version: &amp;#39;1.12&amp;#39;
Define this dependency in pom.xml if you are using maven.</description>
    </item>
    
    <item>
      <title>Creating File Server with Embedded Jetty Server in Java</title>
      <link>https://simplesolution.dev/creating-file-server-with-embedded-jetty-server-in-java/</link>
      <pubDate>Mon, 08 Apr 2019 14:00:00 +0700</pubDate>
      
      <guid>https://simplesolution.dev/creating-file-server-with-embedded-jetty-server-in-java/</guid>
      <description>In this tutorial you will learn simple step by step to write an Java application which using Embedding Jetty API to creating a static file server.
   (adsbygoogle = window.adsbygoogle || []).push({});  The very first step you need to do is add Jetty Server dependency to your project.
Using Gradle compile group: &amp;#39;org.eclipse.jetty&amp;#39;, name: &amp;#39;jetty-server&amp;#39;, version: &amp;#39;9.4.15.v20190215&amp;#39;
Using Maven &amp;lt;dependency&amp;gt;&amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt;&amp;lt;artifactId&amp;gt;jetty-server&amp;lt;/artifactId&amp;gt;&amp;lt;version&amp;gt;9.4.15.v20190215&amp;lt;/version&amp;gt;&amp;lt;/dependency&amp;gt;
To listen HTTP request at a specified port we need to create org.</description>
    </item>
    
    <item>
      <title>How to use Java ArrayList with Examples</title>
      <link>https://simplesolution.dev/how-to-use-java-arraylist-with-examples/</link>
      <pubDate>Sun, 07 Apr 2019 14:00:00 +0700</pubDate>
      
      <guid>https://simplesolution.dev/how-to-use-java-arraylist-with-examples/</guid>
      <description>In this tutorial we will go through a list of examples to show you how use java.util.ArrayList in Java program. You will learn how to adding, updating, getting, sorting and other operations on elements of an ArrayList. ArrayList is an implementation of List interface with class diagram as below:
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add one element to an ArrayList There are two approaches to add an element to ArrayList which is append it to the end of the list or you can insert it to specified index position List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();list.</description>
    </item>
    
    <item>
      <title>How to use Java ArrayDeque with Examples</title>
      <link>https://simplesolution.dev/how-to-use-java-arraydeque-with-examples/</link>
      <pubDate>Thu, 04 Apr 2019 14:00:00 +0700</pubDate>
      
      <guid>https://simplesolution.dev/how-to-use-java-arraydeque-with-examples/</guid>
      <description>In this tutorial we will learn how to use the java.util.ArrayDeque class, a member class of Java Collections Framework. We will go through different examples to see how this class suppport methods that allow you to insert and retrieves element in both front and end of the element list. ArrayDeque is an implementation of Deque interface with class diagram as below:
   (adsbygoogle = window.adsbygoogle || []).push({});  How to use ArrayDeque as a stack We can push an element onto the stack and pop it from stack using ArrayDeque as below Deque&amp;lt;Integer&amp;gt; deque = new ArrayDeque&amp;lt;&amp;gt;();deque.</description>
    </item>
    
    <item>
      <title>Gradle Configuration to generate Java classes from WSDL with JAXB</title>
      <link>https://simplesolution.dev/gradle-configuration-to-generate-java-classes-from-wsdl-with-jaxb/</link>
      <pubDate>Wed, 03 Apr 2019 14:00:00 +0700</pubDate>
      
      <guid>https://simplesolution.dev/gradle-configuration-to-generate-java-classes-from-wsdl-with-jaxb/</guid>
      <description>In this blog post we will learn the step by step guide to configure gradle build file in order to generate Java classes from a WSDL file. This configure will be useful when you are working on project related to SOAP web service.
   (adsbygoogle = window.adsbygoogle || []).push({});  Let start with an empty Java project with build.gradle file as below group &amp;#39;simplesolution.dev&amp;#39;version &amp;#39;1.0.0&amp;#39;apply plugin: &amp;#39;java&amp;#39;sourceCompatibility = 1.</description>
    </item>
    
    <item>
      <title>How to use BigDecimal in Java by Examples</title>
      <link>https://simplesolution.dev/how-to-use-bigdecimal-in-java-by-examples/</link>
      <pubDate>Sat, 30 Mar 2019 14:00:00 +0700</pubDate>
      
      <guid>https://simplesolution.dev/how-to-use-bigdecimal-in-java-by-examples/</guid>
      <description>As a Java developer if you are working with financial systems or developing systems that need granularity in your calculation then you should thinking about BigDecimal. BigDecimal is an immutable class, provides in java.math package. It consists of operations for arithmetic, scale manipulation, rounding, comparison, hashing, and format conversion. In this blog post we will learn how to use BigDecimal through a list of examples.
   (adsbygoogle = window.</description>
    </item>
    
    <item>
      <title>Top 5 Libraries for Serialization and Deserialization JSON in Java</title>
      <link>https://simplesolution.dev/top-5-libraries-for-serialization-and-deserialization-json-in-java/</link>
      <pubDate>Sat, 30 Mar 2019 14:00:00 +0700</pubDate>
      
      <guid>https://simplesolution.dev/top-5-libraries-for-serialization-and-deserialization-json-in-java/</guid>
      <description>In this blog post we will go through 5 useful open source libraries to serialization and deserialize JSON data in Java application. For each library we will write a simple code sample to show you how to use the library to convert Java object to a JSON string and vice-versa.
   (adsbygoogle = window.adsbygoogle || []).push({});  Gson Github repository: github.com/google/gson
Adding Gson dependency into your project Using Gradle compile group: &amp;#39;com.</description>
    </item>
    
    <item>
      <title>Writing Excel File Using Apache POI Library in Java</title>
      <link>https://simplesolution.dev/writing-excel-file-using-apache-poi-library-in-java/</link>
      <pubDate>Tue, 26 Mar 2019 20:34:25 +0700</pubDate>
      
      <guid>https://simplesolution.dev/writing-excel-file-using-apache-poi-library-in-java/</guid>
      <description>Apache POI is and open source Java library allow you to read and write Microsoft Documents such as Excel workbook, Word document, Powerpoint presentation.
In this blog post I will show you how to use Apache POI library to writing an Excel file. Throughout this blog post we will implement an Java application to generate the Excel file as the figure below:
   (adsbygoogle = window.adsbygoogle || []).</description>
    </item>
    
  </channel>
</rss>