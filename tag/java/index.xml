<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Simple Solution</title>
    <link>https://simplesolution.dev/tag/java/</link>
    <description>Recent content in Java on Simple Solution</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 30 Mar 2019 14:00:00 +0700</lastBuildDate>
    
	<atom:link href="https://simplesolution.dev/tag/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to use BigDecimal in Java by Examples</title>
      <link>https://simplesolution.dev/how-to-use-bigdecimal-in-java-by-examples/</link>
      <pubDate>Sat, 30 Mar 2019 14:00:00 +0700</pubDate>
      
      <guid>https://simplesolution.dev/how-to-use-bigdecimal-in-java-by-examples/</guid>
      <description>As a Java developer if you are working with financial systems or developing systems that need granularity in your calculation then you should thinking about BigDecimal. BigDecimal is an immutable class, provides in java.math package. It consists of operations for arithmetic, scale manipulation, rounding, comparison, hashing, and format conversion. In this blog post we will learn how to use BigDecimal through a list of examples.
How to initialize BigDecimal object We can initialize BigDecimal object by using constructor or static factory methods: BigDecimal bigDecimal1 = new BigDecimal(123456.</description>
    </item>
    
    <item>
      <title>Top 5 Libraries for Serialization and Deserialization JSON in Java</title>
      <link>https://simplesolution.dev/top-5-libraries-for-serialization-and-deserialization-json-in-java/</link>
      <pubDate>Sat, 30 Mar 2019 14:00:00 +0700</pubDate>
      
      <guid>https://simplesolution.dev/top-5-libraries-for-serialization-and-deserialization-json-in-java/</guid>
      <description>In this blog post we will go through 5 useful open source libraries to serialization and deserialize JSON data in Java application. For each library we will write a simple code sample to show you how to use the library to convert Java object to a JSON string and vice-versa.
Gson Github repository: github.com/google/gson
Adding Gson dependency into your project Using Gradle compile group: &amp;#39;com.google.code.gson&amp;#39;, name: &amp;#39;gson&amp;#39;, version: &amp;#39;2.8.5&amp;#39;</description>
    </item>
    
    <item>
      <title>Writing Excel File Using Apache POI Library in Java</title>
      <link>https://simplesolution.dev/writing-excel-file-using-apache-poi-library-in-java/</link>
      <pubDate>Tue, 26 Mar 2019 20:34:25 +0700</pubDate>
      
      <guid>https://simplesolution.dev/writing-excel-file-using-apache-poi-library-in-java/</guid>
      <description>Apache POI is and open source Java library allow you to read and write Microsoft Documents such as Excel workbook, Word document, Powerpoint presentation.
In this blog post I will show you how to use Apache POI library to writing an Excel file. Throughout this blog post we will implement an Java application to generate the Excel file as the figure below:
Overview Apache POI Library At the time of writing this blog post, the latest stable release is Apache POI 4.</description>
    </item>
    
  </channel>
</rss>