<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xml on Simple Solution</title>
    <link>https://simplesolution.dev/tag/xml/</link>
    <description>Recent content in Xml on Simple Solution</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 18 Jun 2021 20:26:44 +0700</lastBuildDate>
    
	<atom:link href="https://simplesolution.dev/tag/xml/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Escape XML Content and Attribute in Java using Google Guava</title>
      <link>https://simplesolution.dev/java-escape-xml-content-and-attribute-using-google-guava/</link>
      <pubDate>Fri, 18 Jun 2021 20:26:44 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-escape-xml-content-and-attribute-using-google-guava/</guid>
      <description>In this Java tutorial we learn how to escape a XML content string or XML attribute value using the XmlEscapers class of Google Guava library.
   (adsbygoogle = window.adsbygoogle || []).push({});  How to add Google Guava library to the Java project To use the Google Guava library in the Gradle build project, add the following dependency into the build.gradle file.
implementation group: &amp;#39;com.google.guava&amp;#39;, name: &amp;#39;guava&amp;#39;, version: &amp;#39;30.</description>
    </item>
    
    <item>
      <title>Pretty Print XML String and XML File in Java using jsoup</title>
      <link>https://simplesolution.dev/java-jsoup-pretty-print-xml-string-and-file/</link>
      <pubDate>Sun, 01 Nov 2020 23:28:25 +0700</pubDate>
      
      <guid>https://simplesolution.dev/java-jsoup-pretty-print-xml-string-and-file/</guid>
      <description>In this tutorial, we are going to show how to use the jsoup library in a Java program to pretty sprint a XML String or XML file content. We provide different working Java programs to show different use cases on how to parse XML String or XML File into jsoup Document object in order to format the XML content for pretty printing.
   (adsbygoogle = window.adsbygoogle || []).</description>
    </item>
    
  </channel>
</rss>